#ifndef VFUTIL_MUL_GH
#define VFUTIL_MUL_GH

#include "core.gh"

fixpoint int mul(int x, int y) { return x*y; }

lemma void as_mul(int x, int y)
    requires true;
    ensures  mul(x,y) == x*y;
{}

// mul_mono_r/l from verifast's test/longlong.c, renamed because a
// later version of verifast has these in its prelude
lemma void my_mul_mono_l(int a1, int a2, int b);
    requires a1 <= a2 &*& 0 <= b;
    ensures a1 * b <= a2 * b;

lemma void my_mul_mono_r(int a, int b1, int b2);
    requires 0 <= a &*& b1 <= b2;
    ensures a * b1 <= a * b2;

lemma void my_mul_strict_mono_l(int a1, int a2, int b);
    requires a1 < a2 &*& 0 < b;
    ensures a1 * b < a2 * b;

lemma void my_mul_strict_mono_r(int a, int b1, int b2);
    requires 0 < a &*& b1 < b2;
    ensures a * b1 < a * b2;

lemma void my_inv_mul_mono_l(int a1, int a2, int b);
    requires a1*b <= a2*b &*& 0 < b;
    ensures a1 <= a2;

lemma void my_inv_mul_mono_r(int a, int b1, int b2);
    requires 0 < a &*& a*b1 <= a*b2;
    ensures b1 <= b2;

lemma void my_inv_mul_strict_mono_l(int a1, int a2, int b);
    requires a1*b < a2*b &*& 0 < b;
    ensures a1 < a2;

lemma void my_inv_mul_strict_mono_r(int a, int b1, int b2);
    requires 0 < a &*& a*b1 < a*b2;
    ensures b1 < b2;

lemma void mul_to_zero(int x, int y);
    requires x*y == 0;
    ensures  x == 0 || y == 0;

fixpoint int mul_abstract(int a,int b) { return a*b; }
lemma void mul_abstract_def(int a,int b)
    requires true;
    ensures  mul_abstract(a,b) == a*b;
{}

lemma void mul_assoc(int x, int y, int z);
    requires true;
    ensures x*(y*z) == (x*y)*z;

lemma void mul_commutes(int a, int b);
    requires true;
    ensures  a*b == b*a;

lemma void mul_3var(int x,int y,int z);
    requires true;
    ensures  x*(y*z) == (x*y)*z
        &*&  x*(y*z) == x*(z*y)
        &*&  x*(y*z) == (x*z)*y
        &*&  x*(y*z) == (y*x)*z
        &*&  x*(y*z) == y*(x*z)
        &*&  x*(y*z) == y*(z*x);

lemma void mul_abs_commute(int x, int y);
    requires true;
    ensures  abs(x)*abs(y) == abs(x*y);

//lemma_auto(abs(mul(x,y))) void mul_abs_commute_auto(int x, int y)
//    requires true;
//    ensures  mul(abs(x),abs(y)) == abs(mul(x,y));
//{
//    mul_abs_commute(x,y);
//    //as_mul(x,y);
//    //as_mul(abs(x),abs(y));
//}

lemma void zero_mul_unique(int x, int y);
    requires y != 0;
    ensures  (x*y == 0) == (x == 0);

lemma_auto(pow_nat(x,n))
void pow_nat_pos(int x, nat n);
    requires x >= 1;
    ensures  pow_nat(x,n) >= 1;

lemma_auto(pow_nat(x,noi(n)))
void pow_nat_int_pos(int x, int n);
    requires x >= 1;
    ensures  pow_nat(x,noi(n)) >= 1;

lemma_auto(pow_nat(x,noi(n)))
void pow_nat_hard_pos(int x, int n);
    requires x > 1 && n > 0;
    ensures  pow_nat(x,noi(n)) > 1;

lemma_auto(pow_nat(1,n))
void pow_1(nat n)
    requires true;
    ensures pow_nat(1,n) == 1;
{ NAT_INDUCTION(n,n0,pow_1(n0)) }

lemma void pow_plus(int x,nat y,int z);
    requires z >= 0;
    ensures  pow_nat(x,noi(ion(y)+z))
        ==   pow_nat(x,y)*pow_nat(x,noi(z));

lemma void pow_times1(int x,int y,nat z);
    requires true;
    ensures  pow_nat(x,z)*pow_nat(y,z)
        ==   pow_nat(x*y,z);

lemma void pow_times2(int x,nat y,int z);
    requires z >= 0;
    ensures  pow_nat(x,noi(ion(y)*z))
        ==   pow_nat(pow_nat(x,y),noi(z));

lemma void pow_soft_monotonic(int x,nat y,nat z);
    requires x >= 1 &*& ion(y) <= ion(z);
    ensures  pow_nat(x,y) <= pow_nat(x,z);

lemma void pow_monotonic(int x,nat y,nat z);
    requires x > 1 &*& ion(y) < ion(z);
    ensures  pow_nat(x,y) < pow_nat(x,z);

lemma void pow_base_soft_monotonic(int x,int y,nat n);
    requires x >= 0 &*& y >= x;
    ensures  pow_nat(x,n) <= pow_nat(y,n);

fixpoint int pow2(nat n) { return pow_nat(2,n); }

fixpoint int factorial(nat n) {
    switch(n) {
    case zero: return 1;
    case succ(n0): return ion(n)*factorial(n0);
    }
}

lemma_auto(factorial(n))
void factorial_positive(nat n);
    requires true;
    ensures factorial(n) >= 1;

#endif

