#ifndef VFUTIL_LISTS_GH
#define VFUTIL_LISTS_GH

#include <list.gh>
#include <assoclist.gh>
#include <permutations.gh>
#include "util.gh"

#define ASSOC(s,t) list<pair<s,t> >

lemma_auto(mem(x,reverse(l)))
void mem_reverse<t>(t x,list<t> l)
    requires true;
    ensures  mem(x,reverse(l)) == mem(x,l);
{ LIST_INDUCTION(l,xs,mem_reverse(x,xs)) }

lemma_auto(remove(pair(k,v),l))
void remove_assoc_of_distinct<s,t>(s k, t v, ASSOC(s,t) l);
    requires distinct(keys(l)) && mem(pair(k,v),l);
    ensures  remove(pair(k,v),l) == remove_assoc(k,l);

lemma_auto(remove(x,l))
void remove_nonmem<t>(t x, list<t> l)
    requires true;
    ensures  (remove(x,l) == l) == !mem(x,l);
{ LIST_INDUCTION(l, xs, remove_nonmem(x, xs)) }

lemma_auto(remove(x,l))
void remove_distinct<t>(t x, list<t> l)
    requires !!distinct(l);
    ensures  !mem(x,remove(x,l));
{ LIST_INDUCTION(l, xs, remove_distinct(x, xs)) }

lemma_auto(mem(x,remove(y,l)))
void mem_remove<t>(t x, t y, list<t> l)
    requires !!mem(x,remove(y,l));
    ensures  !!mem(x,l);
{ LIST_INDUCTION(l, xs, if(mem(x,remove(y,xs))) mem_remove(x, y, xs)) }

lemma_auto(mem(x,remove(y,l)))
void remove_other<t>(t x, t y, list<t> l)
    requires x != y;
    ensures  mem(x,remove(y,l)) == mem(x,l);
{ LIST_INDUCTION(l, xs, remove_other(x, y, xs)) }

lemma
void remove_exact<t>(t x, t y, list<t> l)
    requires !!mem(x,l) &*& !mem(x,remove(y,l));
    ensures  x == y;
{
  switch(l) {
  case nil:
  case cons(v,vs):
    if(x != v) { remove_exact(x,y,vs); }
  }
}

lemma_auto(remove(x,remove(x,l)))
void remove_idempotent<t>(t x, list<t> l)
    requires !!distinct(l);
    ensures  remove(x,l) == remove(x,remove(x,l));
{ LIST_INDUCTION(l, xs, remove_idempotent(x, xs)) }

lemma t not_distinct<t>(list<t> a)
    requires !distinct(a);
    ensures  !!mem(result,a) &*& !!mem(result,remove(result,a));
{
    switch(a) {
    case nil: assert false;
    case cons(x,xs):
        if(mem(x,xs)) {
            return x;
        } else {
            return not_distinct(xs);
        }
    }
}

lemma t not_permutation_distinct<t>(list<t> a, list<t> b)
    requires !is_permutation(a,b) &*& !!distinct(a) &*& !!distinct(b);
    ensures  mem(result,a) != mem(result,b);
{
    switch(a) {
    case nil:
        switch(b) {
        case nil: assert false;
        case cons(bx,bxs):
            return bx;
        }
    case cons(ax,axs):
        if(!mem(ax,b)) {
            return ax;
        } else {
            distinct_remove(ax,b);
            return not_permutation_distinct(axs,remove(ax,b));
        }
    }
}

lemma_auto(is_permutation(keys(a),keys(b)))
void keys_permutation<s,t>(ASSOC(s,t) a, ASSOC(s,t) b);
    requires is_permutation(a,b) && distinct(keys(a))
        &&   distinct(keys(b));
    ensures  !!is_permutation(keys(a),keys(b));


lemma_auto(length(l)) void nil_length_auto<t>(list<t> l)
    requires true;
    ensures  (length(l) == 0) == (l == nil);
{ TRIVIAL_LIST(l) }


lemma_auto(tail(l)) void cons_head_tail<t>(list<t> l)
    requires l != nil;
    ensures  l == cons(head(l),tail(l));
{ TRIVIAL_LIST(l) }

lemma_auto(drop(n,append(p,s))) void drop_of_append<t>(
        int n, list<t> p, list<t> s);
    requires n == length(p);
    ensures drop(n,append(p,s)) == s;

lemma_auto(take(n,append(p,s)))
void take_of_append_exact<t>(
        int n, list<t> p, list<t> s);
    requires n == length(p);
    ensures take(n,append(p,s)) == p;

lemma //_auto(take(n,append(p,s)))
void take_of_append_r<t>(
        int n, list<t> p, list<t> s);
    requires n >= length(p);
    ensures take(n,append(p,s)) == append(p,take(n-length(p),s));

lemma_auto(all_eq(reverse(l),x))
void all_eq_reverse<t>(list<t> l, t x);
    requires true;
    ensures  all_eq(reverse(l),x) == all_eq(l,x);

lemma t not_all_eq<t>(list<t> l, t x);
    requires !all_eq(l,x);
    ensures  !!mem(result,l) &*& result != x;

lemma void all_eq_elim<t>(list<t> l, t x, t y);
    requires !!all_eq(l,x) &*& !!mem(y,l);
    ensures  y == x;

lemma_auto(all_eq(drop(n,l),x)) void all_eq_drop<t>(list<t> l, int n,
        t x);
    requires n >= 0 && n <= length(l) && all_eq(l,x);
    ensures  !!all_eq(drop(n,l),x);

lemma_auto(all_eq(append(a,b),x))
void all_eq_append<t>(list<t> a,list<t> b, t x);
    requires true;
    ensures  all_eq(append(a,b),x) == (all_eq(a,x) && all_eq(b,x));

lemma_auto(drop(n,drop(m,l)))
void drop_n_of_drop_m<t>(int n, int m, list<t> l);
    requires n >= 0 && m >= 0;
    ensures  drop(n,drop(m,l)) == drop(n+m,l);

lemma_auto(drop(n,take(m,l)))
void drop_n_of_take_m<t>(int n, int m, list<t> l);
    requires n >= 0 && m >= 0 && m >= n && m <= length(l);
    ensures  drop(n,take(m,l)) == take(m-n,drop(n,l));

lemma_auto(take(n,take(m,l)))
void take_n_of_take_m<t>(int n, int m, list<t> l);
    requires n >= 0 && m >= 0 && m >= n && m <= length(l);
    ensures  take(n,take(m,l)) == take(n,l);

lemma_auto(all_eq(take(n,l),v))
void all_eq_take<t>(int n, list<t> l, t v);
    requires n >= 0 && n <= length(l) && all_eq(l,v);
    ensures  !!all_eq(take(n,l),v);

lemma //_auto(is_permutation(a,b))
void permutation_length<t>(list<t> a, list<t> b);
    requires !!is_permutation(a,b);
    ensures  length(a) == length(b);

lemma_auto(remove(x,append(a,b)))
void remove_append<t>(t x, list<t> a, list<t> b);
    requires !!mem(x,a);
    ensures  remove(x,append(a,b)) == append(remove(x,a),b);

lemma_auto(is_permutation(a,b))
void permutation_symm<t>(list<t> a, list<t> b);
    requires true;
    ensures  is_permutation(a,b) == is_permutation(b,a);

//lemma
//void permutation_disjoint<t>(list<t> a, list<t> b, list<t> c)
//    requires !!is_permutation(a,b);
//    ensures  distinct(append(a,c)) == distinct(append(b,c));
//{
//    switch(a) {
//    case nil: return;
//    case cons(x,xs):
//        permutation_length(xs,remove(x,b));
//    }
//}

//lemma_auto(is_permutation(append(xs,cons(x,ys)),
//            append(cons(x,xs),ys)))
//void permutation_cons_swap<t>(t x, list<t> xs, list<t> ys)
//    requires distinct(xs) && distinct(ys);
//    ensures  !!is_permutation(append(xs,cons(x,ys)),
//            append(cons(x,xs),ys));
//{
//    assert append(cons(x,xs),ys) == cons(x,append(xs,ys));
//    assert remove(x,append(cons(x,xs),ys)) == append(xs,ys);
//    disjoint_append(cons(x,xs),ys);
//    assert !distinct(cons(x,xs));
//    assert !mem(x,xs);
//    assert remove(x,append(xs,cons(x,ys))) == append(xs,ys);
//    assert  !!is_permutation(append(xs,cons(x,ys)),
//            append(cons(x,xs),ys));
//}

fixpoint int sum(list<int> l) {
    switch(l) {
    case nil: return 0;
    case cons(x,xs): return x + sum(xs);
    }
}

lemma void nonneg_sum(list<int> l)
    requires !!forall(l,(ge_than)(0));
    ensures  sum(l) >= 0;
{ LIST_INDUCTION(l,xs,nonneg_sum(xs)) }

lemma void map_length<s,t>(fixpoint(s,t) f, list<s> l)
    requires true;
    ensures  length(map(f,l)) == length(l);
{ LIST_INDUCTION(l,xs,map_length(f,xs)) }

lemma void mem_fst_snd<s,t>(s a, t b, list<pair<s,t> > l)
    requires true;
    ensures  !mem(pair(a,b),l) || (mem(a,map(fst,l)) &&
            mem(b,map(snd,l)));
{ LIST_INDUCTION(l,xs,mem_fst_snd(a,b,xs)) }

lemma s map_remove<s,t>(t v, fixpoint(s,t) f, list<s> l)
    requires !!mem(v,map(f,l));
    ensures  v == f(result)
        &*&  map(f,remove(result,l)) == remove(v,map(f,l));
{
    switch(l) {
    case nil: assert false;
    case cons(x,xs):
        if(f(x) == v) {
            return x;
        } else {
            return map_remove(v,f,xs);
        }
    }
}

lemma s map_preimage<s,t>(t b, fixpoint(s,t) f, list<s> l)
    requires !!mem(b,map(f,l));
    ensures  !!mem(result,l) &*& f(result) == b;
{
    return map_remove(b,f,l);
}

lemma s mem_snd_find<s,t>(t b, list<pair<s,t> > l)
    requires !!mem(b,map(snd,l));
    ensures  !!mem(pair(result,b),l);
{
    pair<s,t> pre = map_preimage(b, snd, l);
    switch(pre) {
    case pair(x,y):
        return x;
    }
}

lemma //_auto(filter((constf)(true),l))
void filter_id<t>(list<t> l)
    requires true;
    ensures  filter((constf)(true),l) == l;
{ LIST_INDUCTION(l,xs,filter_id(xs)) }

lemma void nonneg_filter_sum(list<int> l, fixpoint(int,bool) f)
    requires !!forall(l,(ge_than)(0));
    ensures  sum(filter(f,l)) <= sum(l);
{ LIST_INDUCTION(l,xs,nonneg_filter_sum(xs,f)) }

lemma void forall_filter<t>(list<t> l, fixpoint(t,bool) p,
        fixpoint(t,bool) f)
    requires !!forall(l,p);
    ensures  !!forall(filter(f,l),p);
{ LIST_INDUCTION(l,xs,forall_filter(xs,p,f)) }

lemma void forall_remove<t>(list<t> l, fixpoint(t,bool) p,
        t x)
    requires !!forall(l,p);
    ensures  !!forall(remove(x,l),p);
{ LIST_INDUCTION(l,xs,forall_remove(xs,p,x)) }

lemma t pigeonhole<t>(list<t> l1, list<t> l2)
    requires !!forall(l1,(contains)(l2))
        &*&  length(l1) > length(l2);
    ensures  !!mem(result,l1) &*& !!mem(result,remove(result,l1))
        &*&  !distinct(l1);
{
    switch(l2) {
    case nil:
        switch(l1) {
        case nil: assert false;
        case cons(x,xs): assert false;
        }
    case cons(x,xs):
        if(!mem(x,l1)) {
            if(!forall(l1,(contains)(xs))) {
                t y = not_forall(l1,(contains)(xs));
                forall_elim(l1,(contains)(l2),y);
                assert false;
            }
            return pigeonhole(l1,xs);
        } else if(mem(x,remove(x,l1))) {
            if(distinct(l1)) { remove_distinct(x,l1); }
            return x;
        } else {
            if(!forall(remove(x,l1),(contains)(xs))) {
                t y = not_forall(remove(x,l1),(contains)(xs));
                forall_elim(l1,(contains)(l2),y);
                assert false;
            }
            assert length(remove(x,l1)) == length(l1)-1;
            t ret = pigeonhole(remove(x,l1),xs);
            assert !!mem(ret,remove(x,l1));
            assert !!mem(ret,l1);
            assert !!mem(ret,remove(ret,remove(x,l1)));
            remove_commutes(l1,ret,x);
            assert !!mem(ret,remove(ret,l1));
            if(distinct(l1)) { remove_distinct(ret,l1); }
            return ret;
        }
    }
}

lemma t filter_diff<t>(fixpoint(t,bool) f1, fixpoint(t,bool) f2,
        list<t> l);
    requires filter(f1,l) != filter(f2,l);
    ensures  !!mem(result,l) &*& f1(result) != f2(result);

lemma t filter_effect<t>(fixpoint(t,bool) f, list<t> l);
    requires filter(f,l) != l;
    ensures  !!mem(result,l) &*& !f(result);

fixpoint list<t> repeat<t>(t v, nat n) {
    switch(n) {
    case zero:     return {};
    case succ(n0): return cons(v,repeat(v,n0));
    }
}

lemma_auto(repeat(v,n)) void repeat_nil<t>(t v, nat n)
    requires true;
    ensures  (repeat(v,n) == nil) == (n == zero);
{ TRIVIAL_NAT(n) }

lemma_auto(all_eq(repeat(v,n),v)) void repeat_all_eq<t>(t v, nat n)
    requires true;
    ensures  !!all_eq(repeat(v,n),v);
{ NAT_INDUCTION(n,n0,repeat_all_eq(v,n0)) }

lemma_auto(length(repeat(v,n))) void repeat_len<t>(t v, nat n)
    requires true;
    ensures  length(repeat(v,n)) == int_of_nat(n);
{ NAT_INDUCTION(n,n0,repeat_len(v,n0)) }

lemma_auto(mem(x,repeat(v,n))) void mem_repeat<t>(t x, t v, nat n);
    requires !!mem(x,repeat(v,n));
    ensures  x == v;

lemma_auto(append(repeat(v,n),repeat(v,m)))
void append_repeat<t>(t v, nat n, nat m);
    requires true;
    ensures  append(repeat(v,n),repeat(v,m))
        ==   repeat(v,nat_of_int(int_of_nat(n)+int_of_nat(m)));

lemma_auto(forall(repeat(v,n),(bounded)(lo,hi)))
void repeat_bounded(int v, nat n, int lo, int hi);
    requires true;
    ensures  forall(repeat(v,n),(bounded)(lo,hi))
        == (n == zero || bounded(lo,hi,v));

fixpoint list<int> indices_of_inner<t>(t v, list<t> l, int base) {
    switch(l) {
    case nil: return {};
    case cons(x,xs):
        return (x == v ? cons(base, indices_of_inner(v,xs,base+1))
                       : indices_of_inner(v,xs,base+1));
    }
}

fixpoint list<int> indices_of<t>(t v, list<t> l) {
    return indices_of_inner(v,l,0);
}

lemma
void indices_of_inner_correct<t>(t v, list<t> l, int b, int i);
    requires true;
    ensures  mem(i,indices_of_inner(v,l,b))
        ==   (nth_of(i-b,l) == some(v));

lemma_auto(mem(i,indices_of_inner(v,l,b)))
void indices_of_inner_correct_auto<t>(t v, list<t> l, int b, int i);
    requires !!mem(i,indices_of_inner(v,l,b));
    ensures  (nth_of(i-b,l) == some(v));

lemma
void indices_of_inner_bounds<t>(t v, list<t> l, int b, int i);
    requires !!mem(i,indices_of_inner(v,l,b));
    ensures  i >= b &*& i < b+length(l);

lemma_auto(mem(i,indices_of_inner(v,l,b)))
void indices_of_inner_bounds_auto1<t>(t v, list<t> l, int b, int i);
    requires !!mem(i,indices_of_inner(v,l,b));
    ensures  i >= b;

lemma_auto(mem(i,indices_of_inner(v,l,b)))
void indices_of_inner_bounds_auto2<t>(t v, list<t> l, int b, int i);
    requires !!mem(i,indices_of_inner(v,l,b));
    ensures  i < b+length(l);

lemma_auto(indices_of_inner(v,append(a,b),i))
void indices_of_inner_append<t>(t v, list<t> a, list<t> b, int i)
    requires true;
    ensures  indices_of_inner(v,append(a,b),i)
        ==   append(indices_of_inner(v,a,i),
                    indices_of_inner(v,b,i+length(a)));
{ LIST_INDUCTION(a,axs, indices_of_inner_append(v,axs,b,i+1)) }

fixpoint int maximum(list<int> l) {
    switch(l) {
    case nil: return 0;
    case cons(x,xs):
        return switch(xs) {
        case nil: return x;
        case cons(v,vs): return max_of(x,maximum(xs));
        };
    }
}

lemma void maximum_correct(int x, list<int> l);
    requires !!mem(x,l);
    ensures  !!mem(maximum(l),l) &*& maximum(l) >= x;

lemma_auto(mem(maximum(cons(x,xs)),cons(x,xs)))
void maximum_is_mem(int x, list<int> xs)
    requires true;
    ensures  !!mem(maximum(cons(x,xs)),cons(x,xs));
{
  switch(xs) {
  case nil:
  case cons(v,vs):
    maximum_is_mem(v,vs);
  }
}

lemma void maximum_remove(int x,list<int> l);
    requires !!mem(x,l) &*& length(l) > 1;
    ensures  maximum(l) == max_of(x,maximum(remove(x,l)));

lemma void maximum_permutation(list<int> a,list<int> b);
    requires !!is_permutation(a,b);
    ensures  maximum(a) == maximum(b);

lemma_auto(maximum(cons(a,cons(b,l))))
void maximum_swap(int a, int b, list<int> l)
    requires true;
    ensures  maximum(cons(a,cons(b,l)))
        ==   maximum(cons(b,cons(a,l)));
{ TRIVIAL_LIST(l) }

lemma void index_of_witness<t>(int i,t x,list<t> l)
    requires !!distinct(l) &*& nth_of(i,l) == some(x);
    ensures  index_of(x,l) == i;
{ LIST_INDUCTION(l,xs,if(i > 0) index_of_witness(i-1,x,xs)) }

lemma_auto(length(reverse(l)))
void length_reverse<t>(list<t> l)
    requires true;
    ensures  length(reverse(l)) == length(l);
{ LIST_INDUCTION(l,xs,length_reverse(xs)) }

lemma
void reverse_ends<t>(t x,list<t> l,t y);
    requires true;
    ensures  reverse(cons(x,append(l,cons(y,nil))))
        ==   cons(y,append(reverse(l),cons(x,nil)));

lemma_auto(take(n,l))
void take_more<t>(int n, list<t> l)
    requires n >= length(l);
    ensures  take(n,l) == l;
{ LIST_INDUCTION(l,xs,take_more(n-1,xs)) }

lemma_auto(nth_of(n,reverse(a)))
void nth_of_reverse<t>(int n, list<t> a)
    requires true;
    ensures  nth_of(n,reverse(a)) == nth_of(length(a)-1-n,a);
{
    switch(a) {
    case nil:
    case cons(x,xs):
        note_eq( nth_of(n,reverse(a))
            ,  nth_of(n,append(reverse(xs),{x})));
        nth_of_bounds(n,reverse(xs));
        nth_of_bounds(n,reverse(a));
        nth_of_bounds(length(a)-1-n,a);
        if(n >= 0) nth_of_append(n,reverse(xs),{x});
        if(n >= 0) {
            if(n == length(xs)) {
                if(n > length(reverse(xs))) assert false;
                nth_of_append(n,reverse(xs),{x});
                assert nth_of(n,reverse(a))
                    == nth_of(n-length(xs),{x});
                assert nth_of(n,reverse(a)) == some(x);
                assert nth_of(length(a)-1-n,a) == some(x);
            } else if(n > length(xs)) {
                assert nth_of(n,reverse(a))
                    == nth_of(n-length(xs),{x});
            } else { assert n < length(xs);
                assert nth_of(n,reverse(a))
                    == nth_of(n,reverse(xs));
                nth_of_reverse(n,xs);
                assert nth_of(n,reverse(xs))
                    == nth_of(length(xs)-1-n,xs);
                assert nth_of(n,reverse(xs))
                    == nth_of(length(a)-1-n,a);
            }
        } else {
            option<t> nth_rev_a = nth_of(n,reverse(a));
            option<t> nth_a = nth_of(length(a)-1-n,a);
            TRIVIAL_OPTION(nth_rev_a)
            TRIVIAL_OPTION(nth_a)
        }
    }
}

lemma_auto(take(n,reverse(a)))
void take_reverse<t>(int n, list<t> a)
    requires n >= 0 && n <= length(a);
    ensures  take(n,reverse(a)) == reverse(drop(length(a)-n,a));
{
    switch(a) {
    case nil:
    case cons(x,xs):
        assert take(n,reverse(a))
            == take(n,append(reverse(xs),{x}));
        if(n <= length(xs)) {
            take_append(n,reverse(xs),{x});
            assert take(n,reverse(a))
                == take(n,reverse(xs));
            take_reverse(n,xs);
            assert take(n,reverse(a))
                == reverse(drop(length(a)-1-n,xs));
            assert take(n,reverse(a))
                == reverse(drop(length(a)-n,a));
        } else { assert n == length(a);
            assert take(n,reverse(a))
                == reverse(a);
            assert drop(length(a)-n,a)
                == a;
        }
    }
}

lemma
void nth_of_map<s,t>(int n, list<s> l,fixpoint(s,t) f)
    requires true;
    ensures  nth_of(n,map(f,l))
        ==   opmap(f,nth_of(n,l));
{ LIST_INDUCTION(l,xs,nth_of_map(n-1,xs,f)) }

lemma
void all_eq_map<s,t>(list<s> l, s v, fixpoint(s,t) f)
    requires !!all_eq(l,v);
    ensures  !!all_eq(map(f,l),f(v));
{ LIST_INDUCTION(l,xs,all_eq_map(xs,v,f)) }

fixpoint list<t> ndrop<t>(nat n,list<t> l) {
    switch(n) {
    case zero: return l;
    case succ(n0):
        return switch(l) {
        case nil: return nil;
        case cons(x,xs): return ndrop(n0,xs);
        };
    }
}

fixpoint list<t> ntake<t>(nat n,list<t> l) {
    switch(n) {
    case zero: return nil;
    case succ(n0):
        return switch(l) {
        case nil: return nil;
        case cons(x,xs): return cons(x,ntake(n0,xs));
        };
    }
}

#define NAT_LIST_INDUCTION(n,n0,l,xs,body) \
    switch(n) { case zero: case succ(n0): \
        switch(l) { case nil: case cons(l##x,xs): body; } }

lemma_auto(ndrop(n,l))
void ndrop_nil<t>(nat n,list<t> l)
    requires true;
    ensures  (ndrop(n,l) == nil) == (int_of_nat(n) >= length(l));
{ NAT_LIST_INDUCTION(n,n0,l,xs,ndrop_nil(n0,xs)) }

lemma_auto(ndrop(n,l))
void ntake_l<t>(nat n,list<t> l)
    requires true;
    ensures  (ntake(n,l) == l) == (int_of_nat(n) >= length(l));
{ NAT_LIST_INDUCTION(n,n0,l,xs,ntake_l(n0,xs)) }

lemma_auto(append(ntake(n,l),ndrop(n,l)))
void append_ntake_ndrop<t>(nat n,list<t> l)
    requires true;
    ensures  append(ntake(n,l),ndrop(n,l)) == l;
{ NAT_LIST_INDUCTION(n,n0,l,xs,
        append_ntake_ndrop(n0,xs)) }


#endif

