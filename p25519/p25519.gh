#ifndef VFUTIL_P25519_GH
#define VFUTIL_P25519_GH

#include "../util.gh"
#include "../numtheo.gh"
#include "../finfield.gh"

fixpoint int P25519() {
    return pow_nat(2,nat_of_int(255)) - 19;
}

fixpoint int P448() {
    return pow_nat(2,nat_of_int(448)) - pow_nat(2,nat_of_int(224)) - 1;
}

lemma void p25519_formula();
    requires true;
    ensures  P25519
        ==   pow_nat(pow_nat(2,N15),N16)*pow_nat(2,N15) - 19;

lemma pratt_cert p25519_pratt();
    requires true;
    ensures  pratt_certificate(result,1,_,P25519);

lemma void p25519_is_prime();
    requires true;
    ensures  !!is_prime(P25519);

lemma void p448_formula();
    requires true;
    ensures  P448
        ==   pow_nat(pow_nat(pow_nat(2,N8),N8),N7)
        -    pow_nat(pow_nat(pow_nat(2,N8),N4),N7)
        -    1;

lemma pratt_cert p448_pratt();
    requires true;
    ensures  pratt_certificate(result,1,_,P448);

lemma void p448_is_prime();
    requires true;
    ensures  !!is_prime(P448);

#define MODPOW_STEP2(P,g,e,acc,sofar) \
        prev_sofar = sofar; \
        if((ediv)%2 != 0) { sofar = (acc*sofar)%P; } \
        if((ediv/2)%2 != 0) { sofar = (acc1*sofar)%P; } \
        modpow_step_by_2(P,g,e,acc,acc1,prev_sofar); \
        ediv /= 4; \
        acc = (acc1*acc1)%P; acc1 = (acc*acc)%P;

#if 0
#define MODPOW_STEP4(P,g,e,acc,sofar) \
        MODPOW_STEP2(P,g,e,acc,sofar) \
        MODPOW_STEP2(P,g,e,acc,sofar)

#else
#define MODPOW_STEP4(P,g,e,acc,sofar) \
        prev_sofar = sofar; \
        if((ediv  )%2 != 0) { sofar = (acc *sofar)%P; } \
        if((ediv/2)%2 != 0) { sofar = (acc1*sofar)%P; } \
        if((ediv/4)%2 != 0) { sofar = (acc2*sofar)%P; } \
        if((ediv/8)%2 != 0) { sofar = (acc3*sofar)%P; } \
        modpow_step_by_4(P,g,e,acc,acc1,acc2,acc3,prev_sofar); \
        ediv /= 16; \
        acc  = (acc3*acc3)%P; acc1 = (acc*acc)%P; \
        acc2 = (acc1*acc1)%P; acc3 = (acc2*acc2)%P;
#endif

#define MODPOW_STEP8(P,g,e,acc,sofar) \
        MODPOW_STEP4(P,g,e,acc,sofar) \
        MODPOW_STEP4(P,g,e,acc,sofar)

#define MODPOW_STEP16(P,g,e,acc,sofar) \
        MODPOW_STEP8(P,g,e,acc,sofar) \
        MODPOW_STEP8(P,g,e,acc,sofar)

#define MODPOW_STEP32(P,g,e,acc,sofar) \
        MODPOW_STEP16(P,g,e,acc,sofar) \
        MODPOW_STEP16(P,g,e,acc,sofar)

#define MODPOW_STEP64(P,g,e,acc,sofar) \
        MODPOW_STEP32(P,g,e,acc,sofar) \
        if(ediv != 0) { \
            MODPOW_STEP32(P,g,e,acc,sofar) \
        }

#define MODPOW_STEP128(P,g,e,acc,sofar) \
        MODPOW_STEP64(P,g,e,acc,sofar) \
        if(ediv != 0) { \
            MODPOW_STEP64(P,g,e,acc,sofar) \
        }

#define MODPOW_STEP256(P,g,e,acc,sofar) \
        MODPOW_STEP128(P,g,e,acc,sofar) \
        if(ediv != 0) { \
            MODPOW_STEP128(P,g,e,acc,sofar) \
        }

#define MODPOW_STEP512(P,g,e,acc,sofar) \
        MODPOW_STEP256(P,g,e,acc,sofar) \
        if(ediv != 0) { \
            MODPOW_STEP256(P,g,e,acc,sofar) \
        }

#define MODPOW_FULL(p,g,E,N_BITS) { \
        int e = E; \
        int ediv = e; \
        division_unique(e,pow_nat(2,N0),e,0); \
        int acc = g; \
        int sofar = 1; \
        int prev_sofar = 1; \
        int acc1 = (acc*acc)%p; \
        int acc2 = (acc1*acc1)%p; \
        int acc3 = (acc2*acc2)%p; \
 \
        close modpowp(p,g,e,zero,ediv,acc,acc1,acc2,acc3,sofar); \
        MODPOW_STEP##N_BITS(p,g,e,acc,sofar) \
        modpowp_correct(p,g,e); \
    }

#define PRATT_FACTOR(p,g,q,N_BITS) \
    if(!pratt_pow_thing(p,g,q)) { \
        { \
            int e = (p-1)/q; \
            int ediv = e; \
            division_unique(e,pow_nat(2,N0),e,0); \
            int acc = g; \
            int sofar = 1; \
            int prev_sofar = 1; \
            int acc1 = (acc*acc)%p; \
            int acc2 = (acc1*acc1)%p; \
            int acc3 = (acc2*acc2)%p; \
\
            close modpowp(p,g,e,zero,ediv,acc,acc1,acc2,acc3,sofar); \
            MODPOW_STEP##N_BITS(p,g,e,acc,sofar) \
        } \
        if(!pratt_pow_thing(p,g,q)) { \
            pratt_pow_thing_modpowp(p,g,q); \
            assert false; \
        } \
 \
        assert false; \
    }

#define PRATT_BUILD_PRELUDE(this_P,this_g) \
    int P = this_P; int g = this_g; \
    p25519_##this_P##_g##this_g##_generates(); \
    p25519_##this_P##_1_factors(); \
    p25519_##this_P##_g##this_g##_exact_order(); \
    int f; \
    pratt_cert ret; \
    pratt_cert cert; \
    list<pair<int,pratt_cert> > fact = nil; \
    close pratt_certificate(pratt_cert(g,fact),P-1,N0,P);

#define PRATT_BUILD_SMALL(F) \
    f = F; \
    cert = pratt_small(f); \
    close pratt_certificate(cert,1,zero,f); \
    ret = pratt_certificate_build(g,fact,f,P); \
    fact = cons(pair(f,cert),fact);

#define PRATT_BUILD_BIG(F) \
    f = F; \
    cert = p25519_##F##_pratt(); \
    ret = pratt_certificate_build(g,fact,f,P); \
    fact = cons(pair(f,cert),fact);


#endif

