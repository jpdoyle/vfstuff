#ifndef VFUTIL_UTIL_GH
#define VFUTIL_UTIL_GH

#include "core.gh"

lemma void forall_append_exact<t>(list<t> a, list<t> b, fixpoint(t,bool) p);
    requires true;
    ensures  forall(append(a,b),p) == (forall(a,p) && forall(b,p));

lemma_auto(mem(x,reverse(l))) void reverse_mem<t>(list<t> l, t x);
    requires true;
    ensures  mem(x,l) == mem(x,reverse(l));

lemma void forall_reverse<t>(list<t> l, fixpoint(t,bool) p);
    requires true;
    ensures  forall(l,p) == forall(reverse(l),p);

lemma_auto(reverse(append(a,b)))
void reverse_append_auto<t>(list<t> a,list<t> b)
    requires true;
    ensures  reverse(append(a,b)) == append(reverse(b),reverse(a));
{ reverse_append(a,b); }

//lemma_auto(some(x) == some(y))
lemma_auto(assoc_of(key,l)) void assoc_lookup_of<k,v>(k key,
            list<pair<k,v> > l);
    requires true;
    ensures  assoc_of(key,l) == opmap((pair)(key),lookup_of(key,l));

fixpoint bool disjoint<t>(list<t> a, list<t> b) {
    return forall(a,(notf)((flip)(mem,b)));
}

lemma void disjoint_append<t>(list<t> a, list<t> b);
    requires true;
    ensures  distinct(append(a,b)) == (distinct(a) && distinct(b) && disjoint(a,b));

lemma void disjoint_with_append<t>(list<t> a, list<t> b, list<t> c);
    requires true;
    ensures  disjoint(a,append(b,c)) == (disjoint(a,b) && disjoint(a,c));

lemma_auto(disjoint(a,b)) void disjoint_symm<t>(list<t> a, list<t> b);
    requires true;
    ensures  disjoint(a,b) == disjoint(b,a);

lemma_auto(distinct(reverse(l))) void distinct_reverse<t>(list<t> l);
    requires true;
    ensures  distinct(reverse(l)) == distinct(l);


fixpoint bool bounded(int min, int max, int x) {
    return x >= min && x <= max;
}

fixpoint list<int> range_inner(int min, int max, nat f) {
    switch(f) {
    case zero: return nil;
    case succ(f0): return cons(min,range_inner(min+1,max,f0));
    }
}

fixpoint list<int> range(int min, int max) {
    return max < min ? nil : range_inner(min,max,nat_of_int(max-min));
}

lemma
void range_inner_len(int min,int max, nat n)
    requires true;
    ensures  length(range_inner(min,max,n))
        ==   int_of_nat(n);
{ NAT_INDUCTION(n,n0,range_inner_len(min+1,max,n0)) }

lemma_auto(length(range(min,max)))
void range_len(int min,int max)
    requires max >= min;
    ensures  length(range(min,max)) == max-min;
{ range_inner_len(min,max,nat_of_int(max-min)); }

lemma void bounded_range(int min, int max, int x)
    requires min <= max;
    ensures  bounded(min,max,x) == mem(x,range(min,max+1));
{
    for(nat f = zero; max+1 - int_of_nat(f) > min; f = succ(f))
        invariant max+1 - int_of_nat(f) >= min
            &*&   bounded(max+1-int_of_nat(f),max,x)
                == mem(x,range_inner(max+1-int_of_nat(f),max+1,f))
            ;
        decreases max+1 - int_of_nat(f) - min;
    { }
}

lemma_auto(distinct(range(min,max)))
void range_distinct(int min,int max)
    requires true;
    ensures  !!distinct(range(min,max));
{
    if(min >= max) {
        return;
    }

    for(nat f = zero; max - int_of_nat(f) > min; f = succ(f))
        invariant max - int_of_nat(f) >= min
            &*&   let(range_inner(max-int_of_nat(f),max,f),
                      ?l)
            &*&   !!distinct(l)
            &*&   !!forall(l,(bounded)(max-int_of_nat(f),max-1))
            ;
        decreases max - int_of_nat(f) - min;
    {
        int v = max-int_of_nat(succ(f));
        assert range_inner(v,max,succ(f))
            == cons(v,l);

        if(mem(v,l)) {
            forall_elim(l,(bounded)(max-int_of_nat(f),max-1),
                    v);
            assert false;
        }

        if(!forall(l, (bounded)(max-int_of_nat(succ(f)),max-1))) {
            int cx = not_forall(l,
                    (bounded)(max-int_of_nat(succ(f)),max-1));
            forall_elim(l,(bounded)(max-int_of_nat(f),max-1),
                    cx);
            assert false;
        }
    }
}

lemma//_auto(bounded(l,h,x))
void bounded_cases(int l, int h, int x);
    requires !!bounded(l,h,x);
    ensures  (x != l) == bounded(l+1,h,x);

lemma_auto(bounded(l,l,x)) void bounded_base_case(int l, int x)
    requires true;
    ensures  (x == l) == bounded(l,l,x);
{ }

predicate malloced_string(char* s; list<char> cs) =
        string(s,cs) &*& malloc_block_chars(s,?numbytes)
    &*& s[length(cs) + 1..numbytes] |-> _;

lemma_auto void malloced_string_inv()
    requires [?f]malloced_string(?s,?cs);
    ensures  [ f]malloced_string( s, cs)
        &*&  s > 0 &*& s+length(cs)+1 <= (char*)UINTPTR_MAX
        &*&  !mem('\0',cs)
        ;
{
    if(!(s > 0 && s+length(cs)+1 <= (char*)UINTPTR_MAX
        &&  !mem('\0',cs)
        )) {
        string_limits(s);
        string_to_body_chars(s);
        assert false;
    }
}

predicate malloced_strings(char* * base, int n;
    list<list<char> > strs) =
        base != 0 &*& n >= 0 &*&
        (n == 0
        ? strs == {}
        : n > 0 &*& pointer(base, ?ptr)
            &*& malloced_string(ptr,?first)
            &*& malloced_strings(base+1,n-1,?rest)
            &*& strs == cons(first,rest)
        );

lemma_auto void malloced_strings_public();
    requires [?f]malloced_strings(?base,?n,?strs);
    ensures  [ f]malloced_strings( base, n, strs)
        &*&  n >= 0
        &*&  base != 0
        &*&  length(strs) == n
        ;

lemma void u_llong_integer_limits(unsigned long long *p);
    requires [?f]u_llong_integer(p, ?v);
    ensures [f]u_llong_integer(p, v) &*& p > (unsigned long long *)0
        &*& p + 1 <= (unsigned long long *)UINTPTR_MAX &*& 0 <= v
        &*& v <= ULLONG_MAX;

lemma void u_llong_integer_unique(unsigned long long *p);
    requires [?f]u_llong_integer(p, ?v);
    ensures [f]u_llong_integer(p, v) &*& f <= 1;

lemma void chars_split_as(char *array,
        list<char> pref,list<char> suff);
    requires [?f]chars(array, ?N, append(pref,suff));
    ensures [f]chars(array, length(pref), pref)
        &*& [f]chars(array + length(pref), length(suff), suff);

lemma void ints_split_as(int *array,
        list<int> pref,list<int> suff);
    requires [?f]ints(array, ?N, append(pref,suff));
    ensures [f]ints(array, length(pref), pref)
        &*& [f]ints(array + length(pref), length(suff), suff);

lemma void uints_split_as(unsigned *array,
        list<unsigned> pref,list<unsigned> suff);
    requires [?f]uints(array, ?N, append(pref,suff));
    ensures [f]uints(array, length(pref), pref)
        &*& [f]uints(array + length(pref), length(suff), suff);

lemma void uints_split(unsigned *array, int offset);
    requires [?f]uints(array, ?N, ?as) &*& 0 <= offset &*& offset <= N;
    ensures [f]uints(array, offset, take(offset, as))
        &*& [f]uints(array + offset, N - offset, drop(offset, as))
        &*& as == append(take(offset, as), drop(offset, as));

lemma void uints_join(unsigned *a);
    requires [?f]uints(a, ?M, ?as) &*& [f]uints(a + M, ?N, ?bs);
    ensures [f]uints(a, M + N, append(as, bs));

lemma void ints_limits2(int *array);
    requires [?f]ints(array, ?n, ?cs) &*& n > 0;
    ensures [f]ints(array, n, cs) &*& (int *)0 <= array &*&
        array + n <= (int *)UINTPTR_MAX;

lemma void uints_limits(unsigned *array);
    requires [?f]uints(array, ?n, ?cs) &*& n > 0;
    ensures [f]uints(array, n, cs) &*& (unsigned *)0 <= array &*&
        array + n <= (unsigned *)UINTPTR_MAX;

lemma void ullongs_split(unsigned long long *array, int offset);
    requires [?f]ullongs(array, ?N, ?as) &*& 0 <= offset &*& offset <= N;
    ensures [f]ullongs(array, offset, take(offset, as))
        &*& [f]ullongs(array + offset, N - offset, drop(offset, as))
        &*& as == append(take(offset, as), drop(offset, as));

lemma void ullongs_join(unsigned long long *a);
    requires [?f]ullongs(a, ?M, ?as) &*& [f]ullongs(a + M, ?N, ?bs);
    ensures [f]ullongs(a, M + N, append(as, bs));


predicate u_llong_buffer(unsigned long long* start, int len, int cap; list<int> vals)
    =   start != 0 &*& cap > 0 &*& len >= 0 &*& start[..len] |-> vals
    &*& start[len..cap] |-> _;

lemma_auto void u_llong_buffer_auto();
    requires [?f]u_llong_buffer(?start,?len,?cap,?vals);
    ensures  [ f]u_llong_buffer( start, len, cap, vals)
        &*&  f <= 1 &*& start != 0
        &*&  len >= 0 &*& cap > 0 &*& length(vals) == len
        ;

#endif


