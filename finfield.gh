#ifndef VFUTIL_FINFIELD_GH
#define VFUTIL_FINFIELD_GH

#include "util.gh"
#include "numtheo.gh"

lemma void Zp_plus(int p, int a, int b);
    requires p > 0;
    ensures  euclid_mod(a+b,p)
        ==   euclid_mod(euclid_mod(a,p)+euclid_mod(b,p),p);

lemma void Zp_minus(int p, int a, int b);
    requires p > 0;
    ensures  euclid_mod(a-b,p)
        ==   euclid_mod(euclid_mod(a,p)-euclid_mod(b,p),p);

lemma void Zp_diff_zero(int p, int a, int b);
    requires p > 0;
    ensures  (euclid_mod(a-b,p) == 0)
        ==   (euclid_mod(a,p) == euclid_mod(b,p));

lemma void Zp_times(int p, int a, int b);
    requires p > 0;
    ensures  euclid_mod(a*b,p)
        ==   euclid_mod(euclid_mod(a,p)*euclid_mod(b,p),p);

lemma void Zp_prod_zero(int p, int a, int b);
    requires !!is_prime(p);
    ensures  (euclid_mod(a*b,p) == 0)
        ==   (euclid_mod(a,p) == 0 || euclid_mod(b,p) == 0);

lemma void Zp_x_times_zero(int p, int a, int b);
    requires p > 0 &*& euclid_mod(a,p) == 0;
    ensures  euclid_mod(b*a,p) == 0;

lemma void Zp_pow(int p, int a, nat n);
    requires p > 0;
    ensures  euclid_mod(pow_nat(a,n),p)
        ==   euclid_mod(pow_nat(euclid_mod(a,p),n),p);

lemma int Rp_recip(int p, int x);
    requires p > 1 &*& x != 0 &*& gcd(p,abs(x)) == 1;
    ensures  1 <= result &*& result < p
        &*&  euclid_mod(x*result,p) == 1;

lemma void Zp_recip_unique(int p, int x, int r1, int r2);
    requires p > 0
        &*&  euclid_mod(x*r1,p) == 1
        &*&  euclid_mod(x*r2,p) == 1;
    ensures  euclid_mod(r1,p) == euclid_mod(r2,p);

lemma void fermat_little(int p, int x);
    requires !!is_prime(p) &*& euclid_mod(x,p) != 0;
    ensures  euclid_mod(pow_nat(x,nat_of_int(p-1)),p) == 1;

lemma void root_of_unity_loops(int n, int g, nat a, nat b);
    requires n > 1 &*& int_of_nat(a) > 0
        &*&  euclid_mod(pow_nat(g,a),n) == 1;
    ensures  euclid_mod(pow_nat(g,b),n)
        ==   euclid_mod(pow_nat(g,
                    nat_of_int(euclid_mod(int_of_nat(b),
                                          int_of_nat(a)))),n);

lemma void order_gcd(int n, int g, nat a, nat b);
    requires n > 1 &*& int_of_nat(a) > 0 &*& int_of_nat(b) > 0
        &*&  int_of_nat(a) <= int_of_nat(b)
        &*&  euclid_mod(pow_nat(g,a),n) == 1
        &*&  euclid_mod(pow_nat(g,b),n) == 1;
    ensures  let(gcd(int_of_nat(a),int_of_nat(b)),?d)
        &*&  euclid_mod(pow_nat(g,nat_of_int(d)),n) == 1;

fixpoint option<nat> order_mod_n_fueled(nat f, int n, int x,
        option<nat> best_so_far) {
    switch(f) {
    case zero: return best_so_far;
    case succ(f0):
        return order_mod_n_fueled(f0, n, x,
            (euclid_mod(pow_nat(x,f),n) == 1
              ? some(f) : best_so_far));
    }
}

fixpoint option<nat> order_mod_n(int n, int x) {
    return n <= 1 ? none
        : order_mod_n_fueled(nat_of_int(n-1), n, x, none);
}

lemma void order_mod_n_bounded(int n, int x, nat o);
    requires n > 1 &*&  order_mod_n(n,x) == some(o);
    ensures  0 < int_of_nat(o) &*& int_of_nat(o) < n;

lemma void order_mod_n_correct(int n, int x);
    requires n > 1 &*& x >= 1;
    ensures  switch(order_mod_n(n,x)) {
        case none:
            //return gcd(x,n) != 1;
            return euclid_mod(x,n) == 0 || !is_prime(n);
        case some(o):
            return  gcd(x,n) == 1
                &*& euclid_mod(pow_nat(x,o), n) == 1;
    };

lemma void order_mod_n_minimal(int n, int x, nat o);
    requires n > 1 &*& x >= 1 &*& euclid_mod(pow_nat(x,succ(o)), n) == 1;
    ensures  switch(order_mod_n(n,x)) {
        case none: return false;
        case some(my_o):
            return  int_of_nat(my_o) <= int_of_nat(o)+1;
    };

lemma int orders_mod_n_divides(int n, int x, nat o1, nat o2);
    requires n > 1 &*& x >= 1
        &*&  order_mod_n(n,x) == some(o1)
        &*&  euclid_mod(pow_nat(x,succ(o2)), n) == 1;
    ensures  int_of_nat(o1) <= int_of_nat(succ(o2))
        &*&  result*int_of_nat(o1) == int_of_nat(succ(o2));

lemma void pratt_core_lemma(int p, int x);
    requires p > 1 &*& x > 1
        &*&  order_mod_n(p,x) == some(nat_of_int(p-1));
    ensures  !!is_prime(p);



fixpoint bool pratt_pow_thing(int p, int x, int q) {
    return euclid_mod(pow_nat(x,nat_of_int((p-1)/q)),p) != 1;
}

lemma_auto(pratt_pow_thing(p,x,q))
void pratt_pow_thing_auto(int p, int x, int q)
    requires !pratt_pow_thing(p,x,q);
    ensures  euclid_mod(pow_nat(x,nat_of_int((p-1)/q)),p) == 1;
{}

lemma void pratt_order_check_lemma(int p, list<int> p_minus_1, int x);
    requires p > 1 &*& x > 1 &*& x < p
        &*&  !!forall(p_minus_1,is_prime)
        &*&  product(p_minus_1)+1 == p
        &*&  euclid_mod(pow_nat(x,nat_of_int(p-1)),p) == 1
        &*&  !!forall(p_minus_1,(pratt_pow_thing)(p,x))
        ;
    ensures  order_mod_n(p,x) == some(nat_of_int(p-1));

inductive pratt_cert = pratt_small(int)
                     | pratt_cert(int, list<pair<int,pratt_cert> >);

predicate pratt_certificate(pratt_cert cert, int rest_of_p_1, nat fuel; int p)
    =
    switch(cert) {
    case pratt_small(x):
        // Bigger?
        return  x > 1 &*& x < 17*17
            &*& (mem(x,primes_below(N16)) || prime_up_to(N16,x))
            &*& p == x &*& rest_of_p_1 == 1;
    case pratt_cert(g, factors):
        return  p == product(map(fst,factors))*rest_of_p_1 + 1
            &*& g > 1 &*& g < p &*& rest_of_p_1 >= 1
            &*& euclid_mod(pow_nat(g,nat_of_int(p-1)),p) == 1
            &*& switch(factors) {
            case nil: return false;
            case cons(f0,fs0):
                return switch(fuel) {
                case zero: return false;
                case succ(fuel0):
                    return switch(f0) {
                    case pair(q,qcert):
                        return  pratt_certificate(qcert,1,fuel0,q)
                            &*& switch(fs0) {
                            case nil:
                                return true;
                            case cons(f1,fs1):
                                return pratt_certificate(
                                        pratt_cert(g,fs0),
                                        q*rest_of_p_1,fuel0,p);
                            };
                    };
                };
            }
            &*& !!forall(map(fst,factors),(pratt_pow_thing)(p,g));
    };

lemma
void pratt_certificate_raise_fuel(pratt_cert cert, nat f1, nat f2);
    requires [?fr]pratt_certificate(cert,?rest,f1,?p)
        &*&  int_of_nat(f1) <= int_of_nat(f2);
    ensures  [ fr]pratt_certificate(cert, rest,f2, p);

lemma
pratt_cert pratt_certificate_build(int g,
        list<pair<int,pratt_cert> > factors, int q, int p);
    requires pratt_certificate(pratt_cert(g,factors),?rest,_,p)
        &*&  pratt_certificate(?qcert,1,_,q)
        &*&  rest%q == 0
        &*&  !!pratt_pow_thing(p,g,q);
    ensures  pratt_certificate(result, rest/q, _, p)
        &*& result == pratt_cert(g,cons(pair(q,qcert),factors));

lemma
void pratt_certificate_prime_inner(int p, pratt_cert cert, nat fuel);
    requires [?f]pratt_certificate(cert,1,fuel,p);
    ensures  [ f]pratt_certificate(cert,1,fuel,p)
        &*&  !!is_prime(p);

lemma_auto
void pratt_certificate_prime();
    requires [?f]pratt_certificate(?cert,1,?fl,?p);
    ensures  [ f]pratt_certificate(cert,1,fl,p)
        &*&  !!is_prime(p);

fixpoint bool no_divide(int x, int y) { return y != 0 && x%y != 0; }

lemma_auto(no_divide(x,y)) void no_divide_def(int x, int y)
    requires true;
    ensures  no_divide(x,y) == (y != 0 && x%y != 0);
{}

fixpoint bool all_no_divide(int n, list<int> l) {
    switch(l) {
    case nil: return true;
    case cons(x,xs): return x != 0 && n%x != 0 && all_no_divide(n,xs);
    }
}

lemma_auto(all_no_divide(n,l))
void all_no_divide_def(int n, list<int> l)
    requires true;
    ensures  all_no_divide(n,l) == forall(l,(no_divide)(n));
{
    switch(l) {
    case nil:
    case cons(x,xs):
        no_divide_def(n,x);
        all_no_divide_def(n,xs);
    }
}

lemma_auto(prime_up_to(n,x))
void prime_up_to_no_divide(nat n, int x)
    requires int_of_nat(n) < x;
    ensures  prime_up_to(n,x) == all_no_divide(x,primes_below(n));
{
    switch(n) {
    case zero:
    case succ(n0):
        prime_up_to_no_divide(n0,x);
    }
}

lemma
void primes_below_step(int n);
    requires n >= 1;
    ensures  int_of_nat(nat_of_int(n)) == n
        &*&  int_of_nat(succ(nat_of_int(n))) == n+1
        &*&  is_prime(n+1)
        ==   all_no_divide(n+1,primes_below(nat_of_int(n)));

lemma_auto
void primes_below_16();
    requires true;
    ensures  primes_below(N16) == {13,11,7,5,3,2};

// predicate fast_pow_mod(int p, int x, bool e_odd, nat e_over_2;
//                        nat e, int result);
// 
// lemma_auto void fast_pow_mod_correct();
//     requires [?f]fast_pow_mod(?p,?x,?e_odd,?e_over_2,?e,?res);
//     ensures  [ f]fast_pow_mod( p, x, e_odd, e_over_2, e, res)
//         &*&  p > 1 &*& res == euclid_mod(pow_nat(x,e),p)
//         &*&  int_of_nat(e) == 2*int_of_nat(e_over_2) + (e_odd ? 1 : 0);
// 
// lemma void fast_pow_base(int p, int x, bool e_odd, int e, int result);
//     requires p > 1
//         &*&  e_odd ? e == 1 &*& result == euclid_mod(x,p)
//                    : e == 0 &*& result == 1;
//     ensures  e_odd
//             ? fast_pow_mod(p,x,e_odd,_,nat_of_int(e),result)
//             : fast_pow_mod(p,x,e_odd,_,nat_of_int(e),1);
// 
// lemma void fast_pow_step(int p, int x, bool e_odd, nat e_over_2,
//             int e, int result);
//     requires p > 1 &*& fast_pow_mod(p,x,_,_,e_over_2,?prev)
//         &*&  e_odd ?   e == 2*int_of_nat(e_over_2) + 1
//                    &*& result == euclid_mod((prev*prev)*x,p)
//                    :   e == 2*int_of_nat(e_over_2)
//                    &*& result == euclid_mod(prev*prev,p);
//     ensures  fast_pow_mod(p,x,e_odd,e_over_2,nat_of_int(e),result);


lemma void exp_by_sq(int p, int g, int e, int g_p_e);
    requires p > 1 &*& e >= 0
        &*&  g >= 0 &*& g < p
        &*&  g_p_e == euclid_mod(pow_nat(g,nat_of_int(e)),p);
    ensures  euclid_mod(pow_nat(g,nat_of_int(2*e)),p)
        ==   (g_p_e*g_p_e)%p
        &*&  euclid_mod(pow_nat(g,nat_of_int(2*e+1)),p)
        ==   (g*g_p_e*g_p_e)%p;

//lemma pratt_cert build_pratt_cert(int p, int g, int e, int e_factor)
//    requires pratt_certificate(_,1,_,e_factor)
//        &*&  pratt_certificate(_,?rest,_,p)
//        &*&  e_factor > 0
//        &*&  rest%

//    =   p > 1
//    &*& switch(e_over_2) {
//        case zero:
//            return (e_odd ? e == N1   &*& result == euclid_mod(x,p)
//                          : e == zero &*& result == 1);
//        case succ(e_over_2_0):
//            return fast_pow_mod(p,x,int_of_nat(e_over_2)%2 == 1,
//                    nat_of_int(int_of_nat(e_over_2)/2), e_over_2, ?x_p_e_2)
//            &*& let(euclid_mod(x_p_e_2*x_p_e_2,p), ?x_even)
//            &*& (e_odd ? e == succ(nat_double(e_over_2))
//                        &*& result == euclid_mod(x_even * x,p)
//                       : e == nat_double(e_over_2)
//                        &*& result == x_even);
//        };

#endif

