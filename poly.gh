#ifndef VFSTUFF_POLY_H
#define VFSTUFF_POLY_H

#include "util.gh"
#include "mul.gh"
#include "mul.gh"
#include "lists.gh"

fixpoint int poly_eval(list<int> poly, int pt) {
    switch(poly) {
    case nil: return 0;
    case cons(x,xs): return x + pt*poly_eval(xs,pt);
    }
}

fixpoint bool is_zero(int x) { return x == 0; }
fixpoint bool poly_is_zero(list<int> p) { return forall(p,is_zero); }

fixpoint bool minimal(list<int> poly) {
    switch(poly) {
    case nil: return true;
    case cons(x,xs):
        return switch(xs) {
        case nil: return x != 0;
        case cons(v,vs): return minimal(xs);
        };
    }
}

fixpoint list<int> minimize(list<int> poly) {
    switch(poly) {
    case nil: return nil;
    case cons(x,xs):
        return poly_is_zero(xs)
            ?  (x == 0 ? nil : cons(x,nil))
            :  (cons(x,minimize(xs)));
    }
}

lemma void minimize_forall(fixpoint(int,bool) p, list<int> l)
    requires !!forall(l,p);
    ensures  !!forall(minimize(l),p);
{ LIST_INDUCTION(l,xs,minimize_forall(p,xs)) }

lemma_auto(poly_is_zero(p)) void poly_all_eq_zero(list<int> p);
    requires true;
    ensures  all_eq(p,0) == poly_is_zero(p);

lemma_auto(poly_eval(p,pt))
void poly_eval_zero(list<int> p,int pt);
    requires !!poly_is_zero(p);
    ensures  poly_eval(p,pt) == 0;

lemma int poly_eval_neg(list<int> p,int pt);
    requires pt >= 0 &*& poly_eval(p,pt) < 0;
    ensures  result < 0 &*& !!mem(result,p);

lemma_auto(minimize(p)) void minimal_zero(list<int> p);
    requires true;
    ensures  (minimize(p) == nil) == poly_is_zero(p);


lemma_auto(minimal(minimize(p))) void minimal_minimize(list<int> p);
    requires true;
    ensures  !!minimal(minimize(p));

lemma_auto(minimal(p)) void minimize_minimal(list<int> p);
    requires !!minimal(p);
    ensures  minimize(p) == p;

lemma void minimal_append(list<int> a,list<int> b);
    requires !!minimal(b) &*& b != nil;
    ensures  !!minimal(append(a,b));

lemma void minimize_append_r(list<int> a,list<int> b);
    requires minimize(b) != nil;
    ensures  minimize(append(a,b)) == append(a,minimize(b));

lemma void minimize_append_l(list<int> a,list<int> b);
    requires !!minimal(a);
    ensures  minimize(append(a,b)) == append(a,minimize(b));

lemma_auto(mem(x,minimize(p)))
void mem_minimize(int x, list<int> p);
    requires x != 0;
    ensures  mem(x,minimize(p)) == mem(x,p);

lemma void minimize_is_prefix(list<int> p);
    requires true;
    ensures  take(length(minimize(p)),p)
        ==   minimize(p);

lemma_auto(minimize(minimize(p)))
void minimize_idempotent(list<int> p);
    requires true;
    ensures  minimize(minimize(p)) == minimize(p);


lemma_auto(poly_eval(minimize(p),pt))
void minimize_eval(list<int> p, int pt);
    requires true;
    ensures  poly_eval(minimize(p),pt) == poly_eval(p,pt);

fixpoint int degree(list<int> p) { return length(minimize(p))-1; }

fixpoint list<int> poly_scale(int s,list<int> p) {
    switch(p) {
    case nil: return nil;
    case cons(x,xs): return cons(s*x,poly_scale(s,xs));
    }
}

fixpoint list<int> poly_plus(list<int> p, list<int> q) {
    switch(p) {
    case nil: return q;
    case cons(x,xs):
        return switch(q) {
        case nil: return p;
        case cons(y,ys):
            return cons(x+y,poly_plus(xs,ys));
        };
    }
}

lemma_auto(poly_scale(s,p))
void scale_nil(int s,list<int> p);
    requires true;
    ensures  (poly_scale(s,p) == nil) == (p == nil);


lemma_auto(poly_scale(s,nil))
void scale_nil_simple(int s);
    requires true;
    ensures  poly_scale(s,nil) == nil;


lemma_auto(poly_scale(0,p))
void scale_0(list<int> p);
    requires true;
    ensures  !!poly_is_zero(poly_scale(0,p));


lemma_auto(poly_scale(1,p))
void scale_1(list<int> p);
    requires true;
    ensures  p == poly_scale(1,p);


lemma_auto(poly_scale(s,p))
void scale_nonzero(int s,list<int> p);
    requires s != 0;
    ensures  poly_is_zero(poly_scale(s,p)) == poly_is_zero(p);

lemma //_auto(length(poly_scale(s,p)))
void len_scale(int s, list<int> p);
    requires true;
    ensures  length(poly_scale(s,p)) == length(p);


lemma_auto(minimize(poly_scale(s,p)))
void minimize_scale(int s, list<int> p);
    requires s != 0;
    ensures  minimize(poly_scale(s,p))
        ==   poly_scale(s,minimize(p));


lemma_auto(poly_plus(p,q))
void poly_plus_commutes(list<int> p, list<int> q);
    requires true;
    ensures  poly_plus(p,q) == poly_plus(q,p);

lemma
void poly_plus_assoc(list<int> p, list<int> q, list<int> r);
    requires true;
    ensures  poly_plus(p,poly_plus(q,r))
        ==   poly_plus(poly_plus(p,q),r);

lemma_auto(poly_plus(p,q))
void poly_plus_nil_only(list<int> p,list<int> q);
    requires true;
    ensures  (poly_plus(p,q) == nil) == (p == nil && q == nil);


lemma
void len_plus_bound(list<int> p, list<int> q);
    requires true;
    ensures  length(poly_plus(p,q)) >= length(q)
        &*&  length(poly_plus(p,q)) >= length(p);

lemma_auto(length(poly_plus(p,q)))
void len_plus_boundi_auto1(list<int> p, list<int> q);
    requires true;
    ensures  length(poly_plus(p,q)) >= length(p);


lemma_auto(length(poly_plus(p,q)))
void len_plus_boundi_auto2(list<int> p, list<int> q);
    requires true;
    ensures  length(poly_plus(p,q)) >= length(q);


lemma_auto(length(poly_plus(p,q)))
void len_plus(list<int> p, list<int> q);
    requires length(poly_plus(p,q)) != length(p);
    ensures  length(poly_plus(p,q)) == length(q);

lemma_auto(minimal(poly_scale(s,p)))
void scale_minimal(int s, list<int> p);
    requires s != 0;
    ensures  minimal(poly_scale(s,p)) == minimal(p);

lemma //_auto(poly_scale(a,poly_scale(b,p)))
void poly_scale_mul(int a, int b, list<int> p);
    requires true;
    ensures  poly_scale(a,poly_scale(b,p)) == poly_scale(a*b,p);

lemma
void poly_linear(int a, int b, list<int> p);
    requires true;
    ensures  poly_plus(poly_scale(a,p),poly_scale(b,p))
        ==   poly_scale(a+b,p);

lemma
void poly_linear2(int a, list<int> p, list<int> q);
    requires true;
    ensures  poly_plus(poly_scale(a,p),poly_scale(a,q))
        ==   poly_scale(a,poly_plus(p,q));

// keeps minimal polynomials minimal
fixpoint list<int> poly_shift(list<int> xs) {
    return xs == nil ? nil : cons(0,xs);
}

fixpoint list<int> poly_mul(list<int> a,list<int> b) {
    switch(a) {
    case nil: return nil;
    case cons(x,xs):
        return poly_plus(poly_scale(x,b),poly_shift(poly_mul(xs,b)));
    }
}

lemma_auto(poly_eval(poly_scale(s,p),pt))
void poly_scale_eval(int s, list<int> p, int pt);
    requires true;
    ensures  poly_eval(poly_scale(s,p),pt) == s*poly_eval(p,pt);

lemma void poly_zero_eval(list<int> p, int pt);
    requires poly_eval(p,pt) != 0;
    ensures  !poly_is_zero(p);

//lemma int poly_nonzero_pt(list<int> p)
//    requires !poly_is_zero(p);
//    ensures  poly_eval(p,result) != 0;
//{
//    switch(p) {
//    case nil: assert false;
//    case cons(x,xs):
//        if(x != 0) {
//            return 0;
//        }
//        int 
//    }
//}

lemma_auto(poly_eval(poly_plus(p,q),pt))
void poly_plus_eval(list<int> p, list<int> q, int pt);
    requires true;
    ensures  poly_eval(poly_plus(p,q),pt)
        ==   poly_eval(p,pt) + poly_eval(q,pt);

lemma_auto(poly_eval(poly_mul(a,b),pt))
void poly_mul_eval(list<int> a, list<int> b, int pt);
    requires true;
    ensures  poly_eval(poly_mul(a,b),pt)
        ==   poly_eval(a,pt)*poly_eval(b,pt);

lemma void poly_mul_length(list<int> p, list<int> q);
    requires length(p) >= 1 &*& length(q) >= 1;
    ensures  length(poly_mul(p,q)) == length(p) + length(q) - 1;

lemma_auto(poly_mul(p,nil))
void poly_mul_nil(list<int> p);
    requires true;
    ensures  poly_mul(p,nil) == nil;


lemma_auto(poly_mul(p,q))
void poly_mul_nil_only(list<int> p, list<int> q);
    requires true;
    ensures  (poly_mul(p,q) == nil) == (p == nil || q == nil);


lemma_auto(poly_mul(p,cons(s,nil)))
void poly_mul_const(list<int> p,int s);
    requires true;
    ensures  poly_mul(p,cons(s,nil)) == poly_scale(s,p);


lemma
void poly_plus_zero(list<int> p, list<int> q);
    requires !!poly_is_zero(p) &*& length(p) <= length(q);
    ensures  poly_plus(p,q) == q;

lemma_auto(minimize(poly_plus(p,q)))
void poly_plus_zero_min(list<int> p, list<int> q);
    requires !!poly_is_zero(p);
    ensures  minimize(poly_plus(p,q)) == minimize(q);

lemma_auto(minimize(poly_plus(p,q)))
void min_poly_plus(list<int> p, list<int> q);
    requires true;
    ensures  minimize(poly_plus(p,q))
        ==   minimize(poly_plus(minimize(p),minimize(q)));

lemma_auto(minimize(poly_plus(p,q)))
void poly_plus_min(list<int> p, list<int> q);
    requires degree(p) != degree(q);
    ensures  minimize(poly_plus(p,q))
        ==   poly_plus(minimize(p),minimize(q));

lemma_auto(degree(p))
void poly_degree_zero(list<int> p);
    requires true;
    ensures  (degree(p) >= 0) == !poly_is_zero(p);


lemma_auto(minimize(p))
void poly_min_nil(list<int> p);
    requires true;
    ensures  (minimize(p) == nil) == poly_is_zero(p);


lemma_auto(degree(poly_plus(p,q)))
void poly_plus_degree(list<int> p, list<int> q);
    requires degree(p) > degree(q);
    ensures  degree(poly_plus(p,q)) == degree(p);

lemma
void poly_mul_zero(list<int> p, list<int> q);
    requires poly_is_zero(p) || poly_is_zero(q);
    ensures  !!poly_is_zero(poly_mul(p,q));

lemma void poly_mul_commutes_inner(nat f, list<int> p, list<int> q);
    requires ion(f) >= length(p) + length(q);
    ensures  poly_mul(p,q) == poly_mul(q,p);

lemma void poly_mul_distr(list<int> p, list<int> q,
        list<int> r);
    requires true;
    ensures  poly_mul(poly_plus(p,q),r)
        ==   poly_plus(poly_mul(p,r),poly_mul(q,r));

lemma //_auto(poly_mul(poly_scale(s,p),q))
void poly_mul_scale(int s,list<int> p, list<int> q);
    requires true;
    ensures  poly_mul(poly_scale(s,p),q) == poly_scale(s,poly_mul(p,q));

lemma
void poly_shift_mul(list<int> p, list<int> q);
    requires true;
    ensures  poly_shift(poly_mul(p,q))
        ==   poly_mul(poly_shift(p),q);

lemma void poly_mul_assoc(list<int> p, list<int> q,
        list<int> r);
    requires true;
    ensures  poly_mul(poly_mul(p,q),r) == poly_mul(p,poly_mul(q,r));

lemma_auto(poly_mul(p,q)) void poly_mul_commutes(list<int> p,
        list<int> q);
    requires true;
    ensures  poly_mul(p,q) == poly_mul(q,p);


lemma void poly_mul_zero_unique_inner(nat f,list<int> p, list<int> q);
    requires ion(f) >= length(p) + length(q)
        &*&  !!poly_is_zero(poly_mul(p,q)) &*& !poly_is_zero(p);
    ensures  !!poly_is_zero(q);

lemma void poly_mul_zero_unique(list<int> p, list<int> q);
    requires !!poly_is_zero(poly_mul(p,q)) &*& !poly_is_zero(p);
    ensures  !!poly_is_zero(q);


lemma_auto(degree(poly_mul(p,q)))
void degree_poly_mul_bound(list<int> p, list<int> q);
    requires degree(p) >= 0;
    ensures  degree(poly_mul(p,q)) >= degree(q);

lemma_auto(minimize(poly_mul(p,q)))
void poly_mul_minimal(list<int> p, list<int> q);
    requires true;
    ensures  poly_mul(minimize(p),minimize(q))
        ==   minimize(poly_mul(p,q));

lemma void poly_mul_degree(list<int> p, list<int> q);
    requires degree(p) >= 0 &*& degree(q) >= 0;
    ensures  degree(poly_mul(p,q)) == degree(p) + degree(q);


fixpoint bool is_monic(list<int> p)  {
    switch(p) {
    case nil: return false;
    case cons(x,xs):
        return poly_is_zero(xs) ? x == 1 : is_monic(xs);
    }
}

fixpoint int leading_coeff(list<int> p) {
    switch(p) {
    case nil: return 0;
    case cons(x,xs):
        return poly_is_zero(xs) ? x : leading_coeff(xs);
    }
}

lemma_auto(is_monic(p))
void leading_coeff_monic(list<int> p);
    requires true;
    ensures  (leading_coeff(p) == 1) == is_monic(p);


lemma_auto(leading_coeff(p))
void leading_coeff_zero(list<int> p);
    requires true;
    ensures  (leading_coeff(p) == 0) == poly_is_zero(p);


lemma_auto(leading_coeff(poly_scale(s,p)))
void leading_coeff_scale(int s, list<int> p);
    requires true;
    ensures  leading_coeff(poly_scale(s,p)) == s*leading_coeff(p);

lemma void leading_coeff_cancel(list<int> p, list<int> q);
    requires degree(p) == degree(q) &*& degree(p) >= 0
        &*&  leading_coeff(p)+leading_coeff(q) == 0;
    ensures  degree(poly_plus(p,q)) < degree(p);

fixpoint list<int> multishift(nat n, list<int> p) {
    switch(n) {
    case zero: return p;
    case succ(n0): return poly_shift(multishift(n0,p));
    }
}

lemma_auto(multishift(n,p))
void multishift_nil(nat n, list<int> p);
    requires true;
    ensures  (multishift(n,p) == nil) == (p == nil);


lemma_auto(poly_is_zero(multishift(n,p)))
void multishift_zero(nat n, list<int> p);
    requires true;
    ensures  poly_is_zero(multishift(n,p)) == poly_is_zero(p);


lemma_auto(degree(multishift(n,p)))
void multishift_deg(nat n, list<int> p);
    requires degree(p) >= 0;
    ensures  degree(multishift(n,p)) == ion(n)+degree(p);


lemma_auto(leading_coeff(multishift(n,p)))
void multishift_coeff(nat n, list<int> p);
    requires true;
    ensures  leading_coeff(multishift(n,p)) == leading_coeff(p);


lemma void multishift_mul(nat n, list<int> p);
    requires true;
    ensures  multishift(n,p) == poly_mul(multishift(n,cons(1,nil)),p);

lemma pair<list<int>, list<int> > poly_div(list<int> a, list<int> b);
    requires !!is_monic(b);
    ensures  switch(result) {
    case pair(q,r):
        return  degree(r) < degree(b)
            &*& minimize(a) == minimize(poly_plus(poly_mul(q,b),r));
    };

lemma list<int> poly_root(list<int> a, int pt);
    requires poly_eval(a,pt) == 0;
    ensures  minimize(poly_mul(result,cons(-pt,cons(1,nil))))
        ==   minimize(a);

fixpoint bool is_root(list<int> p, int pt) {
    return poly_eval(p,pt) == 0;
}

lemma void poly_max_roots(list<int> p, list<int> pts);
    requires degree(p) >= 0 &*& !!distinct(pts)
        &*&  !!forall(pts,(is_root)(p));
    ensures  length(pts) <= degree(p);

lemma int poly_nonzero_pt(list<int> p);
    requires !poly_is_zero(p);
    ensures  poly_eval(p,result) != 0;

lemma_auto(poly_eval(append(a,b),x))
void poly_eval_append(list<int> a, list<int> b, int x)
    requires true;
    ensures  poly_eval(append(a,b),x)
        ==   poly_eval(a,x)
        +    pow_nat(x,noi(length(a)))*poly_eval(b,x);
{
    switch(a) {
    case nil:
    case cons(v,vs):
        poly_eval_append(vs,b,x);
        mul_3var(x,pow_nat(x,noi(length(vs))),poly_eval(b,x));
        assert poly_eval(append(a,b),x)
            == v + x*poly_eval(append(vs,b),x);
        assert poly_eval(append(a,b),x)
            == v + x*(poly_eval(vs,x) +
                    pow_nat(x,noi(length(vs)))*poly_eval(b,x));
        note_eq(x*(poly_eval(vs,x) +
                    pow_nat(x,noi(length(vs)))*poly_eval(b,x)),
                x*poly_eval(vs,x) +
                x*(pow_nat(x,noi(length(vs)))*poly_eval(b,x)));
        assert poly_eval(append(a,b),x)
            == (v + x*poly_eval(vs,x)) +
                    x*(pow_nat(x,noi(length(vs)))*poly_eval(b,x));
    }
}

lemma_auto(poly_eval(repeat(0,n),pt))
void poly_eval_repeat_0(nat n, int pt)
    requires true;
    ensures  poly_eval(repeat(0,n),pt) == 0;
{ NAT_INDUCTION(n,n0,poly_eval_repeat_0(n0,pt)) }

lemma
void poly_eval_repeat_plus(int x, int y, nat n, int pt)
    requires true;
    ensures  poly_eval(repeat(x+y,n),pt)
        ==   poly_eval(repeat(x,n),pt) + poly_eval(repeat(y,n),pt);
{
    switch(n) {
    case zero:
    case succ(n0):
        poly_eval_repeat_plus(x,y,n0,pt);
        note_eq( poly_eval(repeat(x+y,n),pt)
            ,  x + y +
                pt*(poly_eval(repeat(x,n0),pt) +
                        poly_eval(repeat(y,n0),pt)));
    }
}

lemma
void poly_eval_repeat_mul(int x, int y, nat n, int pt)
    requires true;
    ensures  poly_eval(repeat(x*y,n),pt)
        ==   x*poly_eval(repeat(y,n),pt);
{
    switch(n) {
    case zero:
    case succ(n0):
        poly_eval_repeat_mul(x,y,n0,pt);
        mul_3var(pt,x,poly_eval(repeat(y,n0),pt));
        note_eq( poly_eval(repeat(x*y,n),pt)
            ,  x*(y + pt*poly_eval(repeat(y,n0),pt)));
    }
}

lemma_auto(poly_eval(repeat(1,n),pt))
void poly_eval_repeat_1(nat n, int pt)
    requires true;
    ensures  (1-pt)*poly_eval(repeat(1,n),pt)
        ==   1 - pow_nat(pt,n);
{
    switch(n) {
    case zero:
    case succ(n0):
        poly_eval_repeat_1(n0,pt);
        note_eq( (1-pt)*poly_eval(repeat(1,n),pt)
            ,  (1-pt) * (1 + pt*poly_eval(repeat(1,n0),pt)));
        mul_3var(1-pt,pt,poly_eval(repeat(1,n0),pt));
        note_eq((1-pt)*poly_eval(repeat(1,n),pt)
            ,  (1-pt) + pt*(1 - pow_nat(pt,n0)));
    }
}

lemma
void poly_eval_bounded(list<int> a, int lo, int hi, int x)
    requires !!forall(a,(bounded)(lo,hi)) &*& x >= 0;
    ensures  poly_eval(a,x)
            >= poly_eval(repeat(lo,noi(length(a))),x)
        &*& poly_eval(a,x)
            <= poly_eval(repeat(hi,noi(length(a))),x);
{
    switch(a) {
    case nil:
    case cons(v,vs):
        poly_eval_bounded(vs,lo,hi,x);
        my_mul_mono_r(x,
            poly_eval(repeat(lo,noi(length(vs))),x),
            poly_eval(vs,x));
        my_mul_mono_r(x,
            poly_eval(vs,x),
            poly_eval(repeat(hi,noi(length(vs))),x));
    }
}

lemma void rat_lt_1_ineq(int a, int b, int c, int d)
    requires a > 0 &*& b > 0 &*& a >= b &*& c >= 0
        &*&  a*c <= b*d;
    ensures  (c <= d);
{
    if(c > d) {
        my_mul_mono_l(b,a,c);
        assert a*c >= b*c;
        my_mul_strict_mono_r(b,d,c);
        assert false;
    }
}

lemma
void poly_eval_bounded_pos(list<int> l, int hi, int x)
    requires !!forall(l,(bounded)(0,hi)) &*& x > 0 &*& hi < x
        &*&  hi > 0;
    ensures  poly_eval(l,x) >= 0
        &*& poly_eval(l,x)
            <= (pow_nat(x,noi(length(l)))-1);
{
    nat n = noi(length(l));
    poly_eval_bounded(l,0,hi,x);
    poly_eval_repeat_mul(hi,1,n,x);
    poly_eval_repeat_1(n,x);
    assert (1-x)*poly_eval(repeat(1,n),x)
        == 1 - pow_nat(x,n);
    assert (x-1)*poly_eval(repeat(1,n),x)
        == pow_nat(x,n) - 1;
    my_mul_mono_r(x-1,poly_eval(l,x),hi*poly_eval(repeat(1,n),x));
    assert (x-1)*poly_eval(l,x) <= (x-1)*(hi*poly_eval(repeat(1,n),x));
    mul_3var(x-1,hi,poly_eval(repeat(1,n),x));
    assert (x-1)*(hi*poly_eval(repeat(1,n),x))
        == hi*(pow_nat(x,n)-1);
    assert (x-1)*poly_eval(l,x) <= hi*(pow_nat(x,n)-1);
    rat_lt_1_ineq(x-1, hi, poly_eval(l,x), pow_nat(x,n)-1);
}

lemma
void neg_most_sig(list<int> l, int base, list<int> most_sig)
    requires !!forall(l,(bounded)(0,base-1)) &*& poly_eval(most_sig,base) < 0
        &*&  base > 0;
    ensures  poly_eval(append(l,most_sig),base)
            < (poly_eval(most_sig,base)+1)*pow_nat(base,noi(length(l)))
        &*&  poly_eval(append(l,most_sig),base) < 0
        &*&  poly_eval(append(l,most_sig),base) >=
        poly_eval(most_sig,base)*pow_nat(base,noi(length(l)));
{
    nat n = noi(length(l));
    int sig = poly_eval(most_sig,base);
    poly_eval_bounded(l,0,base-1,base);
    poly_eval_repeat_mul(base-1,1,n,base);
    poly_eval_repeat_1(n,base);
    my_mul_mono_l(sig+1,0,pow_nat(base,n));
}

lemma int poly_negative_coeff(list<int> l, int p)
    requires p >= 0 &*& poly_eval(l,p) < 0;
    ensures  result < 0 &*& !!mem(result,l);
{
    switch(l) {
    case nil: assert false;
    case cons(x,xs):
        if(x < 0) return x;

        assert x + p*poly_eval(xs,p) < 0;
        assert p*poly_eval(xs,p) < 0;
        my_inv_mul_mono_r(p,poly_eval(xs,p),0);
        return poly_negative_coeff(xs,p);
    }
}

lemma int poly_positive_zero(list<int> l, int p)
    requires p > 0 &*& poly_eval(l,p) == 0 &*& !poly_is_zero(l);
    ensures  result < 0 &*& !!mem(result,l);
{
    switch(l) {
    case nil: assert false;
    case cons(x,xs):
        if(x < 0) return x;
        else if(x == 0) {
            assert p*poly_eval(xs,p) == 0;
            // division_zero_unique(p,poly_eval(xs,p),0);
            if(poly_eval(xs,p) > 0) {
                my_mul_mono_r(p,1,poly_eval(xs,p));
                assert false;
            }
            if(poly_eval(xs,p) < 0) {
                my_mul_mono_r(p,poly_eval(xs,p),-1);
                assert false;
            }

            return poly_positive_zero(xs,p);
        } else {
            assert x + p*poly_eval(xs,p) == 0;
            assert p*poly_eval(xs,p) < 0;
            my_inv_mul_mono_r(p,poly_eval(xs,p),0);
            return poly_negative_coeff(xs,p);
        }
    }
}


#endif

