#ifndef VFUTIL_NUMTHEO_GH
#define VFUTIL_NUMTHEO_GH

#include "util.gh"
#include "mul.gh"
#include "div.gh"
#include "lists.gh"
#include "sorting.gh"

fixpoint int product(list<int> l) {
    switch(l) {
    case nil:        return 1;
    case cons(x,xs): return x*product(xs);
    }
}

fixpoint bool nonfactor(int x, int y) {
    return x > 0 && y > 0 && x%y != 0 && y%x != 0; }

lemma_auto(nonfactor(x,x)) void nonfactor_self(int x)
    requires true;
    ensures  !nonfactor(x,x);
{ if(x != 0) { division_unique(x,x,1,0); } }

lemma_auto(nonfactor(x,y)) void nonfactor_symm(int x, int y)
    requires true;
    ensures  nonfactor(x,y) == nonfactor(y,x);
{}

lemma_auto(nonfactor(x,y)) void nonfactor_def(int x, int y)
    requires x >= y && y > 0;
    ensures  nonfactor(x,y) == (x%y != 0);
{
    if(x != y) {
        division_unique(y,x,0,y);
    }
}

fixpoint bool is_prime_fueled(int x, nat f) {
    switch(f) {
    case zero: return true;
    case succ(f0):
        return (int_of_nat(f) >= x ? is_prime_fueled(x,f0)
                : ((x-int_of_nat(f) <= 1) || ((x%(x-int_of_nat(f)) !=
                        0))) &&
                    is_prime_fueled(x,f0));
    }
}

lemma void is_prime_fueled_mono(int x, nat n, nat m)
    requires int_of_nat(n) >= int_of_nat(m);
    ensures  !(    is_prime_fueled(x,n)
               && !is_prime_fueled(x,m));
{
    switch(n) {
    case zero:
    case succ(n0):
        if(n == m) { return; }
        assert int_of_nat(n0) + 1 == int_of_nat(n);
        if(int_of_nat(n) == int_of_nat(m)) {
            nat_of_int_of_nat(n);
            assert false;
        }
        assert int_of_nat(n) > int_of_nat(m);
        is_prime_fueled_mono(x,n0,m);
    }
}

fixpoint bool is_prime(int x) {
    return x > 1 && is_prime_fueled(x,nat_of_int(x));
}

fixpoint list<int> primes_below(nat n) {
    switch(n) {
    case zero: return {};
    case succ(n0):
        return (is_prime(int_of_nat(n))
                ? cons(int_of_nat(n),primes_below(n0))
                : primes_below(n0));
    }
}

lemma void primes_below_correct(nat n)
    requires true;
    ensures  !!distinct(primes_below(n))
        &*&  !!forall(primes_below(n), is_prime)
        &*&  !!forall(primes_below(n), (bounded)(2,int_of_nat(n)))
        ;
{
    switch(n) {
    case zero:
    case succ(n0):
        primes_below_correct(n0);
        if(mem(int_of_nat(n),primes_below(n0))) {
            forall_elim(primes_below(n0), (bounded)(2,int_of_nat(n0)),
                    int_of_nat(n));
            assert false;
        }
        if(!forall(primes_below(n), (bounded)(2,int_of_nat(n)))) {
            int cx = not_forall(primes_below(n),
                    (bounded)(2,int_of_nat(n)));
            if(cx != int_of_nat(n)) {
                forall_elim(primes_below(n0), (bounded)(2,int_of_nat(n0)),
                        cx);
            }
            assert false;
        }
    }
}

lemma_auto(mem(x,primes_below(n)))
void primes_below_correct_auto(nat n,int x)
    requires true;
    ensures  mem(x,primes_below(n))
        ==   (is_prime(x) && bounded(2,int_of_nat(n),x));
{
    switch(n) {
    case zero: return;
    case succ(n0):
        primes_below_correct_auto(n0,x);
    }
}

lemma void primes_below_complete(int p, nat n)
    requires !!is_prime(p) &*& p <= int_of_nat(n);
    ensures  !!mem(p,primes_below(n));
{
    switch(n) {
    case zero:
    case succ(n0):
        if(p != int_of_nat(n)) {
            primes_below_complete(p,n0);
        }
    }
}

lemma void primes_below_as_filter(nat n)
    requires true;
    ensures  primes_below(n) ==
        filter(is_prime,reverse(range(1,int_of_nat(succ(n)))));
{
    switch(n) {
    case zero:
    case succ(n0):
        primes_below_as_filter(n0);
        if(int_of_nat(n0) > 1) {
            reverse_range(1,int_of_nat(n0));
        }
    }
}


lemma void shift_primes_below_range(int bound, nat n)
    requires true;
    ensures  (
        (bound-1 > int_of_nat(n))
        ? filter((ge_than)(bound-1), primes_below(n)) == nil
        : (is_prime(bound-1))
        ? filter((ge_than)(bound-1), primes_below(n))
            == append(
                filter((ge_than)(bound), primes_below(n)),
                ({bound-1}))
        : filter((ge_than)(bound-1), primes_below(n))
            == filter((ge_than)(bound), primes_below(n))
        );
{
    switch(n) {
    case zero:
    case succ(n0):
        shift_primes_below_range(bound+1,n0);
        shift_primes_below_range(bound,n0);
    }
}

fixpoint option<int> first_factor(list<int> l, int x) {
    switch(l) {
    case nil: return none;
    case cons(v,vs):
        return (x%v == 0 ? some(v) : first_factor(vs,x));
    }
}

lemma void prime_no_factors(int x, int y)
    requires !!is_prime(x) &*& y > 1 &*& y != x;
    ensures  x%y != 0;
{
    if(y > x) {
        division_unique(x,y,0,x); return;
    }
    if(x-y == 1) {
        division_unique(x,y,1,1);
        return;
    }

    nat f = zero;

    while(int_of_nat(f) < (x-y))
        invariant !!is_prime_fueled(x,f)
            &*&   int_of_nat(f) <= (x-y);
        decreases (x-y) - int_of_nat(f);
    {
        nat x_f = nat_of_int(x);
        while(int_of_nat(x_f) > int_of_nat(succ(f)))
            invariant int_of_nat(x_f) >= int_of_nat(succ(f))
                &*&   !!is_prime_fueled(x,x_f);
            decreases int_of_nat(x_f);
        {
            switch(x_f) {
            case zero: assert false;
            case succ(x_f0):
                assert !!is_prime_fueled(x,x_f);
                assert !!is_prime_fueled(x,x_f0);
                x_f = x_f0;
            }
        }

        nat_of_int_of_nat(x_f);
        nat_of_int_of_nat(f);
        assert int_of_nat(x_f) == int_of_nat(succ(f));
        assert x_f == succ(f);

        f = succ(f);
    }

    switch(f) {
        case zero: assert false;
        case succ(f0):
    }

}

lemma int findFactor(int x)
    requires x > 1 &*& !is_prime(x);
    ensures  !!is_prime(result) &*& x%result == 0 &*& result > 1
        &*&  result < x;
{
    int factor = x;
    division_unique(x,x,1,0);
    while(!is_prime(factor))
        invariant x%factor == 0 &*& factor > 1 &*& factor <= x;
        decreases factor;
    {
        if(factor <= 2) { assert false; }
        if(!is_prime_fueled(factor,N1)) {
            division_unique(factor,factor-1,1,1);
            assert false;
        }
        int y;
        for(y = factor-1; factor%y != 0; --y)
            invariant y > 1 &*& y < factor
                &*&   (factor%y != 0)
                        == is_prime_fueled(factor,
                                nat_of_int(factor-y))
                &*&   !!is_prime_fueled(factor,
                        nat_of_int(factor-(y+1)))
                ;
            decreases y;
        {
            assert !!is_prime_fueled(factor,nat_of_int(factor-y));
            assert succ(nat_of_int(factor-y)) ==
                nat_of_int(factor- (y-1));
            if(y == 2) {
                assert !is_prime_fueled(factor,nat_of_int(factor));
                assert succ(nat_of_int(factor-1)) ==
                    nat_of_int(factor);
                note( !is_prime_fueled(factor,nat_of_int(factor-1)));
                assert false;
            }
        }

        div_rem(factor,y);
        div_rem(x,factor);
        assert factor == y*(factor/y);
        assert x == factor*(x/factor);
        assert x == y*(factor/y)*(x/factor);
        mul_assoc(y,factor/y,x/factor);
        assert x == y*((factor/y)*(x/factor));
        division_unique(x,y,(factor/y)*(x/factor),0);


        factor = y;
    }
    return factor;
}

lemma int findSomeFactor(int x)
    requires x > 1;
    ensures  !!is_prime(result) &*& x%result == 0 &*& result > 1
        &*&  result <= x;
{
    if(is_prime(x)) {
        division_unique(x,x,1,0);
        return x;
    }
    return findFactor(x);
}

lemma int findSmallFactor(int x)
    requires x > 1 &*& !is_prime(x);
    ensures  !!is_prime(result) &*& x%result == 0 &*& result > 1
        &*&  result*result <= x;
{
    int ret = findFactor(x);
    if(ret*ret <= x) {
        return ret;
    }

    assert ret*ret > x;
    div_rem(x,ret);
    div_sign(x,ret);
    assert x == ret*(x/ret);

    if(x/ret >= ret) {
        my_mul_mono_r(ret,ret,x/ret);
        assert false;
    }

    assert x/ret < ret;
    if((x/ret)*(x/ret) > x) {
        my_mul_mono_l(x/ret,ret,x/ret);
        assert false;
    }

    if(x/ret <= 1) {
        my_mul_mono_r(ret,x/ret,1);
        assert false;
    }

    int final_ret = findSomeFactor(x/ret);
    div_rem(x/ret,final_ret);
    mul_3var(ret,(x/ret)/final_ret, final_ret);
    division_unique(x,final_ret,ret*((x/ret)/final_ret),0);

    if(final_ret*final_ret > x) {
        my_mul_mono_l(final_ret,x/ret,final_ret);
        my_mul_mono_r(x/ret,final_ret,x/ret);
        assert false;
    }

    return final_ret;
}

fixpoint bool prime_up_to(nat n, int x) {
    return forall(primes_below(n),(nonfactor)(x));
}

lemma void prime_test(int x)
    requires x > 1;
    ensures  is_prime(x)
        ==   prime_up_to(nat_of_int(x-1), x);
{
    primes_below_correct(nat_of_int(x-1));
    if(is_prime(x) && !forall(primes_below(nat_of_int(x-1)),
                              (nonfactor)(x))) {
        int cx = not_forall(primes_below(nat_of_int(x-1)),
                (nonfactor)(x));
        forall_elim(primes_below(nat_of_int(x-1)), (bounded)(2,x-1), cx);
        prime_no_factors(x,cx);
        assert false;
    }
    if(!is_prime(x) && forall(primes_below(nat_of_int(x-1)),
                              (nonfactor)(x))) {
        int p = findFactor(x);
        primes_below_complete(p,nat_of_int(x-1));
        forall_elim(primes_below(nat_of_int(x-1)), (nonfactor)(x), p);
        assert false;
    }
}

lemma void prime_up_to_no_factors(nat n, int x, int y)
    requires !!prime_up_to(n,x) &*& y > 1 &*& y <= int_of_nat(n);
    ensures  x%y != 0;
{
    switch(n) {
    case zero: assert false;
    case succ(n0):
        if(x%y == 0) {
            if(y != int_of_nat(n)) {
                prime_up_to_no_factors(n0,x,y);
                assert false;
            } else if(is_prime(y)) {
                assert false;
            } else {
                prime_test(y);
                assert !prime_up_to(nat_of_int(y-1),y);
                int cx = not_forall(primes_below(nat_of_int(y-1)),
                        (nonfactor)(y));
                div_rem(x,y);
                div_rem(y,cx);
                assert y%cx == 0;
                assert !!mem(cx,primes_below(n0));
                assert y == cx*(y/cx);
                assert x == y*(x/y);
                mul_assoc(cx,y/cx,x/y);
                assert x == cx*((y/cx)*(x/y));
                division_unique(x,cx,(y/cx)*(x/y),0);
                prime_up_to_no_factors(n0,x,cx);
                assert false;
            }
            assert false;
        }
    }
}

lemma void prime_test_sqrt(int x, nat n)
    requires x > 1 &*& int_of_nat(n) < x
        &*&  int_of_nat(succ(n))*int_of_nat(succ(n)) > x;
    ensures  is_prime(x) == prime_up_to(n, x);
{
    prime_test(x);
    if(is_prime(x) && !prime_up_to(n, x)) {
        int cx = not_forall(primes_below(n),(nonfactor)(x));
        prime_up_to_no_factors(nat_of_int(x-1),x,cx);
        assert false;
    }
    if(!is_prime(x) && prime_up_to(n, x)) {
        int cx = not_forall(primes_below(nat_of_int(x-1)),
                            (nonfactor)(x));
        div_rem(x,cx);
        assert int_of_nat(nat_of_int(x-1)) == x-1;
        div_sign(x,cx);
        if(cx*cx > x) {
            if(x/cx > cx) {
                my_mul_mono_r(cx,cx,x/cx);
                assert false;
            }
            my_mul_strict_mono_l(x/cx,cx,x/cx);
            assert (x/cx)*(x/cx) < x;
            division_unique(x,x/cx,cx,0);
            if(x/cx <= 0) {
                assert false;
            }
            if(x/cx == 1) {
                assert false;
            }

            cx = x/cx;
        }
        assert cx*cx <= x;
        if(cx > int_of_nat(n)) {
            assert cx >= int_of_nat(succ(n));
            my_mul_mono_l(int_of_nat(succ(n)),cx,int_of_nat(succ(n)));
            my_mul_mono_r(cx,int_of_nat(succ(n)),cx);
            assert false;
        }
        assert cx <= int_of_nat(n);
        assert x%cx == 0;

        prime_up_to_no_factors(n,x,cx);
        assert false;
    }
}

lemma void prime_up_to_composite(nat n, int x)
    requires x > 1 &*& !!prime_up_to(n,x)
        &*&  !is_prime(int_of_nat(succ(n)))
        &*&  int_of_nat(succ(n)) < x
        ;
    ensures  !!prime_up_to(succ(n),x);
{}

fixpoint int gcd_below(int x, int y, nat n) {
    switch(n) {
    case zero: return 1;
    case succ(n0):
        return (x%int_of_nat(n) == 0
                && y%int_of_nat(n) == 0
               ) ? int_of_nat(n) : gcd_below(x,y,n0);
    }
}

fixpoint int gcd(int x,int y) {
    return gcd_below(x,y,nat_of_int(min_of(x,y)));
}

lemma_auto(gcd_below(x,y,n))
void gcd_pos(int x, int y, nat n)
    requires true;
    ensures  gcd_below(x,y,n) > 0;
{ NAT_INDUCTION(n,n0,gcd_pos(x,y,n0)) }

lemma_auto(gcd_below(x,y,n))
void gcd_divides_x(int x, int y, nat n)
    requires true;
    ensures  x%gcd_below(x,y,n) == 0;
{
    switch(n) {
    case zero: division_unique(x,1,x,0);
    case succ(n0):
        if(x%int_of_nat(n) == 0 && y%int_of_nat(n) == 0) {
            return;
        }
        gcd_divides_x(x,y,n0);
    }
}

lemma_auto(gcd_below(x,y,n))
void gcd_below_x(int x, int y, nat n)
    requires x > 0;
    ensures  x >= gcd_below(x,y,n);
{
    div_rem( x,gcd_below(x,y,n));
    div_sign(x,gcd_below(x,y,n));
    mod_sign(x,gcd_below(x,y,n));
    if(x < gcd_below(x,y,n)) {
        my_mul_mono_r(gcd_below(x,y,n),1,x/gcd_below(x,y,n));
        assert false;
    }
}

lemma_auto(gcd_below(x,y,n))
void gcd_symm(int x, int y, nat n)
    requires true;
    ensures  gcd_below(x,y,n) == gcd_below(y,x,n);
{ NAT_INDUCTION(n,n0,gcd_symm(x,y,n0)) }
//    switch(n) {
//    case zero: division_unique(y,1,y,0);
//    case succ(n0):
//        if(x%int_of_nat(n) == 0 && y%int_of_nat(n) == 0) {
//            return;
//        }
//        gcd_divides_y(x,y,n0);
//    }
//}

lemma void gcd_is_max_divisor_inner(int x, int y, int d, nat n)
    requires x > 0 &*& y > 0 &*& x%d == 0 &*& y%d == 0
        &*&  int_of_nat(n) >= d;
    ensures  gcd_below(x,y,n) >= d;
{
    switch(n) {
    case zero:
    case succ(n0):
        if(x%int_of_nat(n) == 0 && y%int_of_nat(n) == 0) {
            return;
        }
        gcd_is_max_divisor_inner(x,y,d,n0);
    }
}

lemma void gcd_is_max_divisor(int x, int y, int d)
    requires x > 0 &*& y > 0 &*& x%d == 0 &*& y%d == 0;
    ensures  gcd(x,y) >= d;
{
    if(gcd(x,y) < d) {
        if(d <= 0) { assert false; }
        if(d > x) {
            division_unique(x,d,0,x);
            assert false;
        }
        if(d > y) {
            division_unique(y,d,0,y);
            assert false;
        }

        int_of_nat_of_int(min_of(x,y));
        div_rem(x,d);
        div_rem(y,d);
        assert min_of(x,y) >= d;
        gcd_is_max_divisor_inner(x,y,d,nat_of_int(min_of(x,y)));
    }
}

// lemma void prime_divides_product_inner(int p, int x, int y, nat n)
//     requires !!is_prime(p) &*& (x*y)%p == 0 &*& abs(x) <= int_of_nat(n);
//     ensures  (x%p == 0 || y%p == 0);
// {
//     switch(n) {
//     case zero: division_unique(0,p,0,0);
//     case succ(n0):
//         if(!(x%p == 0 || y%p == 0)) {
//             if(abs(x) <= 1) {
//                 if(x < 0) {
//                     assert x == -1;
//                     division_unique(y,p,-(x*y)/p,0);
//                 } else if(x < 1) {
//                     assert x == 0;
//                     division_unique(0,p,0,0);
//                 } else {
//                     assert x == 1;
//                     division_unique(y,p,(x*y)/p,0);
//                 }
//                 assert false;
//             }
//             if(is_prime(x)) {
//                 assert x != p;
//                 assert p*((x*y)/p) == x*y;
//                 assert false;
//             }
//             int q = findFactor(x);
//             div_rem(x,q);
//             assert q < x;
//             assert x/q < x;
//             assert false;
//         }
//     }
//     if(x%p != 0 && y%p != 0) {
//         if(abs(x%p + y%p) < p) {
//             assert x*y == (p*(x/p) + x%p)*(p*(y/p) + y%p);
//             assert x*y == (p*(x/p))*(p*(y/p) + y%p) + (x%p)*(p*(y/p) + y%p);
//             assert x*y == (p*(x/p))*(p*(y/p)) + (p*(x/p))*(y%p)
//                         + (x%p)*(p*(y/p)) + (x%p)*(y%p);
//             division_unique(x*y,p,
//                 (
//     }
// }

// lemma void prime_divides_product(int p, int x, int y)
//     requires !!is_prime(p) &*& (x*y)%p == 0;
//     ensures  (x%p == 0 || y%p == 0);
// {
//     if(x%p != 0 && y%p != 0) {
//         if(abs(x%p + y%p) < p) {
//             assert x*y == (p*(x/p) + x%p)*(p*(y/p) + y%p);
//             assert x*y == (p*(x/p))*(p*(y/p) + y%p) + (x%p)*(p*(y/p) + y%p);
//             assert x*y == (p*(x/p))*(p*(y/p)) + (p*(x/p))*(y%p)
//                         + (x%p)*(p*(y/p)) + (x%p)*(y%p);
//             division_unique(x*y,p,
//                 (
//     }
// }

lemma void lincombo_factor(int a, int b, int x, int y, int n, int d)
    requires a*x + b*y == n &*& a%d == 0 &*& b%d == 0 &*& d != 0;
    ensures  n%d == 0;
{
    div_rem(a,d);
    div_rem(b,d);
    assert (d*(a/d))*x + (d*(b/d))*y == n;
    mul_assoc(d,a/d,x);
    mul_assoc(d,b/d,y);
    assert d*((a/d)*x) + d*((b/d)*y) == n;
    assert d*(((a/d)*x) + ((b/d)*y)) == n;
    division_unique(n,d,((a/d)*x + (b/d)*y),0);
}

lemma pair<int,int> gcd_is_min_lincomb_sol(int a, int b, int x, int y, int n)
    requires a*x + b*y == n &*& a%n != 0 &*& n > 0 &*& a > 0 &*& b > 0;
    ensures  switch(result) {
        case pair(x1,y1):
            return a*x1 + b*y1 > 0 &*& a*x1+b*y1 < n;
    };
{
    div_rem(a,n);
    assert a%n == a - n*(a/n);
    assert a%n == a - (a*x + b*y)*(a/n);
    note_eq((a*x + b*y)*(a/n),((a*x)*(a/n) + (b*y)*(a/n)));
    assert a%n == a - ((a*x)*(a/n) + (b*y)*(a/n));
    assert a%n == a - (a*x)*(a/n) - (b*y)*(a/n);
    mul_assoc(a,x,a/n); mul_assoc(b,y,a/n);
    assert a%n == a - a*(x*(a/n)) - b*(y*(a/n));
    assert a%n == a*(1 - x*(a/n)) - b*(y*(a/n));
    if(-b*(y*(a/n)) != b*(-y*(a/n))) {
        note_eq(b*(-y*(a/n)) + b*(y*(a/n)),b*(y*(a/n)+(-y*(a/n))));
        note_eq(0,y*(a/n)+(-y*(a/n)));
        mul_abs_commute(b,(y*(a/n)+(-y*(a/n))));
        assert false;
    }
    //note_eq(-b*(y*(a/n)),b*(-y*(a/n)));
    note_eq(a%n, a*(1 - x*(a/n)) + b*(-y*(a/n)));
    assert a == n*(a/n) + a%n;
    return pair(1-x*(a/n),-y*(a/n));
}

lemma pair<int,int> gcd_min_lincomb_sol(int a, int b)
    requires a > 0 &*& b > 0;
    ensures  switch(result) {
        case pair(x,y):
            return a*x + b*y == gcd(a,b);
    };
{
    int x = 1, y = 0;
    int n = a*x + b*y;
    while(a%n != 0 || b%n != 0)
        invariant a*x + b*y == n &*& n >= 1;
        decreases n;
    {
        if(a%n != 0) {
            switch(gcd_is_min_lincomb_sol(a, b, x, y, n)) {
            case pair(x1,y1):
                x = x1;
                y = y1;
            }
        } else {
            switch(gcd_is_min_lincomb_sol(b, a, y, x, n)) {
            case pair(x1,y1):
                x = y1;
                y = x1;
            }
        }
        n = a*x + b*y;
    }

    lincombo_factor(a,b,x,y,n,gcd(a,b));
    div_rem(n,gcd(a,b));
    div_sign(n,gcd(a,b));
    mod_sign(n,gcd(a,b));
    div_shrinks(n,gcd(a,b));

    assert n == gcd(a,b)*(n/gcd(a,b));

    if(n < gcd(a,b)) {
        if(n/gcd(a,b) <= 0) {
            assert false;
        }
        my_mul_mono_r(gcd(a,b),1,n/gcd(a,b));
        assert false;
    }
    assert n >= gcd(a,b);
    gcd_is_max_divisor(a,b,n);
    assert n <= gcd(a,b);
    return pair(x,y);
}

lemma void divisors_divide_gcd(int x, int y, int d)
    requires x > 0 &*& y > 0 &*& x%d == 0 &*& y%d == 0 &*& d != 0;
    ensures  gcd(x,y)%d == 0;
{
    switch(gcd_min_lincomb_sol(x,y)) {
    case pair(a,b):
        lincombo_factor(x,y,a,b,gcd(x,y),d);
    }
}

lemma void gcd_prime(int p, int y)
    requires !!is_prime(p) &*& y > 0 &*& y%p != 0;
    ensures  gcd(p,y) == 1;
{
    if(gcd(p,y) > 1) {
        prime_no_factors(p,gcd(p,y));
        assert false;
    }
}

lemma void prime_divides_product(int p, int a, int b)
    requires !!is_prime(p) &*& a >= 0 &*& b >= 0 &*& (a*b)%p == 0;
    ensures  (a%p == 0 || b%p == 0);
{
    if(a%p != 0 && b%p != 0) {
        gcd_prime(p,a); gcd_prime(p,b);
        div_rem(a*b,p);
        switch(gcd_min_lincomb_sol(p,b)) {
        case pair(x,y):
            assert p*x + b*y == 1;
            mul_abstract_def(a,p*x + b*y);
            note_eq(a*1,a);
            note_eq(a*(p*x + b*y), a);
            assert a*(p*x) + a*(b*y) == a;

            mul_assoc(a,p,x);
            mul_assoc(p,a,x);
            mul_assoc(a,b,y);
            mul_commutes(a,p);

            assert p*(a*x) + (a*b)*y == a;

            note_eq(a*b,p*((a*b)/p));
            mul_assoc(p,(a*b)/p,y);
            assert p*a*x + p*((a*b)/p)*y == a;
            assert p*(a*x + ((a*b)/p)*y) == a;
            division_unique(a,p,(a*x + ((a*b)/p)*y),0);
            assert false;
        }
    }
}

lemma void prime_divides_factorial(int p, nat n)
    requires !!is_prime(p);
    ensures  (factorial(n)%p == 0) == (int_of_nat(n) >= p);
{
    switch(n) {
    case zero:
        assert factorial(n) == 1;
        division_unique(1,p,0,1);
    case succ(n0):
        assert factorial(n) == int_of_nat(n)*factorial(n0);
        prime_divides_factorial(p,n0);
        if(int_of_nat(n0) >= p) {
            assert int_of_nat(n) >= p;
            div_rem(factorial(n0),p);
            assert factorial(n)
                == int_of_nat(n)*(p*(factorial(n0)/p));
            mul_3var(int_of_nat(n),p,(factorial(n0)/p));
            division_unique(factorial(n),p,int_of_nat(n)*(factorial(n0)/p),0);
        } else if(int_of_nat(n) == p) {
            division_unique(factorial(n),p,factorial(n0),0);
        } else if(factorial(n)%p == 0) {
            prime_divides_product(p,int_of_nat(n),factorial(n0));
            assert factorial(n0)%p != 0;
            division_unique(int_of_nat(n),p,0,int_of_nat(n));
            assert false;
        }
    }
}

lemma void prime_divides_pow(int p, int x, nat n)
    requires !!is_prime(p);
    ensures  (x%p == 0) == (pow_nat(x,succ(n))%p == 0);
{
    switch(n) {
    case zero:
    case succ(n0):
        assert pow_nat(x,succ(n)) == x*pow_nat(x,succ(n0));

        mul_abs_commute(x,pow_nat(x,succ(n0)));

        assert abs(pow_nat(x,succ(n)))
            == abs(x)*abs(pow_nat(x,succ(n0)));

        prime_divides_pow(p,x,n0);

        mod_abs(pow_nat(x,succ(n)),p);
        mod_abs(x,p);
        mod_abs(pow_nat(x,succ(n0)),p);

        if(pow_nat(x,succ(n))%p == 0) {
            prime_divides_product(p,abs(x),abs(pow_nat(x,succ(n0))));

            if(x%p != 0) { assert false; }
        }

        if(x%p == 0) {
            if(pow_nat(x,succ(n))%p != 0) {
                div_rem(x,p);
                assert x == (x/p)*p;
                assert pow_nat(x,succ(n))
                    == x*pow_nat(x,succ(n0));
                assert pow_nat(x,succ(n))
                    == ((x/p)*p)*pow_nat(x,succ(n0));
                mul_3var(x/p,p,pow_nat(x,succ(n0)));
                division_unique(pow_nat(x,succ(n)),p,x/p*pow_nat(x,succ(n0)),0);
                assert false;
            }
        }

    }
}


lemma_auto(indices_of_inner(v,l,b))
void indices_of_length<t>(t v, list<t> l, int b)
    requires true;
    ensures  length(indices_of_inner(v,l,b)) <= length(l);
{ LIST_INDUCTION(l, xs, indices_of_length(v,xs,b+1)) }

lemma void ge_than_primes_length_nat(int i, nat n)
    requires true;
    ensures  length(filter((ge_than)(i), primes_below(n)))
        <=   max_of(0,int_of_nat(n)+1-i);
{ NAT_INDUCTION(n,n0, ge_than_primes_length_nat(i,n0)) }

lemma_auto(filter((ge_than)(i),
            primes_below(nat_of_int(n))))
void ge_than_primes_length(int i, int n)
    requires n >= 0;
    ensures  length(filter((ge_than)(i), primes_below(nat_of_int(n))))
        <=   max_of(0,n+1-i);
{ ge_than_primes_length_nat(i,nat_of_int(n)); }


lemma void sieve_works(int i, int n, list<int> primes)
    requires !!forall(primes, isbit)
        &*&  !!forall(indices_of_inner(1,primes,i), is_prime)
        &*&  !!forall(indices_of_inner(0,primes,i), (notf)(is_prime))
        &*&  i >= 2 &*& i <= n &*& length(primes) == n-i
        ;
    ensures reverse(indices_of_inner(1,primes,i))
        ==  filter((ge_than)(i),
                primes_below(nat_of_int(n-1)));
{
    switch(primes) {
    case nil:
    case cons(x,xs):
        sieve_works(i+1,n,xs);
        shift_primes_below_range(i+1,nat_of_int(n-1));
    }
}

lemma void sqrt_search(int n, int x, int y)
    requires n > 0 &*& x > 0 &*& x < y &*& y < n/x;
    ensures  n/y >= x &*& n/y <= n/x;
{
    div_rem(n,x); div_rem(n,y);
    div_monotonic_denominator(n,x,y);
    if(n/y < x) {
        my_mul_mono_r(y,n/y+1,x);
        assert y*(n/y)+y <= y*x;
        my_mul_mono_l(y,n/x,x);
        assert false;
    }
    if(n/y > n/x) {
        assert false;
    }
}

lemma void sqrt_search2(int n, int x, int y)
    requires n > 0 &*& x > 0 &*& n/x > 0 &*& n/x < y &*& y < x;
    ensures  n/y >= n/x &*& n/y <= x;
{
    div_rem(n,x); div_rem(n,y);
    div_monotonic_denominator(n,y,x);
    if(n/y > x) {
        my_mul_mono_r(y,x+1,n/y);
        assert y*x + y <= y*(n/y);
        my_mul_mono_l(n/x+1,y,x);
        assert false;
    }
}

lemma int prime_divides_product_list(int p, list<int> l)
    requires !!is_prime(p) &*& product(l)%p == 0 &*& product(l) != 0;
    ensures  !!mem(result,l) &*& result%p == 0;
{
    switch(l) {
    case nil: division_unique(product(l),p,0,1); assert false;
    case cons(x,xs):
        if(x%p == 0) { return x; }

        mul_abs_commute(x,product(xs));
        mod_abs(x,p);
        mod_abs(product(l),p);
        mod_abs(product(xs),p);
        assert abs(product(l))%p == 0;
        prime_divides_product(p,abs(x),abs(product(xs)));

        return prime_divides_product_list(p,xs);
    }
}

lemma void product_grows(int x, list<int> xs)
    requires x != 0 &*& !mem(0,xs);
    ensures  abs(product(cons(x,xs))) >= abs(x)
        &*&  abs(product(cons(x,xs))) >= abs(product(xs));
{
    switch(xs) {
    case nil:
    case cons(v,vs):
        product_grows(v,vs);
        mul_abs_commute(x,product(xs));
        my_mul_mono_l(1,abs(x),abs(product(xs)));
        my_mul_mono_r(abs(x),1,abs(product(xs)));
    }
}

lemma void product_commutes(int x, list<int> l)
    requires !!mem(x,l);
    ensures  product(l) == x*product(remove(x,l));
{
    switch(l) {
    case nil: assert false;
    case cons(v,vs):
        if(v != x) {
            mul_commutes(x,v);
            mul_assoc(x,v,product(remove(x,vs)));
            mul_assoc(v,x,product(remove(x,vs)));
            product_commutes(x,vs);
            assert product(l) == v*product(vs);
            assert product(l) == v*(x*product(remove(x,vs)));
            assert product(l) == x*(v*product(remove(x,vs)));
            assert product(l) == x*(product(remove(x,cons(v,vs))));
        }
    }
}

lemma void product_permutation(list<int> l1, list<int> l2)
    requires !!is_permutation(l1,l2);
    ensures  product(l1) == product(l2);
{
    switch(l1) {
    case nil:
        switch(l2) {
        case nil:
        case cons(x,xs): assert false;
        }
    case cons(v,vs):
        assert !!mem(v,l2);
        assert remove(v,l1) == vs;
        assert !!is_permutation(vs,remove(v,l2));

        product_commutes(v,l2);
        assert product(l2) == v*product(remove(v,l2));
        assert product(l1) == v*product(vs);
        product_permutation(vs,remove(v,l2));

    }
}

lemma void product_append(list<int> l1, list<int> l2)
    requires true;
    ensures  product(append(l1,l2)) == product(l1)*product(l2);
{
    switch(l1) {
    case nil:
    case cons(v,vs):
        mul_3var(v,product(vs),product(l2));
        product_append(vs,l2);
    }
}

lemma void unique_prime_factorization(
        int n, list<int> l1, list<int> l2)
    requires product(l1) == n &*& product(l2) == n
        &*&  n > 0 &*& !!forall(l1,is_prime)
        &*&  !!forall(l2,is_prime);
    ensures !!is_permutation(l1,l2);
{
    switch(l1) {
    case nil:
        assert n == 1;
        switch(l2) {
        case nil:
        case cons(x,xs):
            if(mem(0,xs)) { forall_elim(xs,is_prime,0); }
            product_grows(x,xs);
            assert false;
        }
    case cons(x,xs):
        division_unique(n,x,product(xs),0);
        int l2_x = prime_divides_product_list(x,l2);
        forall_elim(l2,is_prime,l2_x);
        if(l2_x != x) {
            div_rem(l2_x,x); div_rem(x,l2_x);
            prime_no_factors(l2_x,x);
            assert false;
        }
        product_commutes(x,l2);
        division_unique(n,x,product(remove(x,l2)),0);
        div_sign(n,x);
        forall_remove(l2,is_prime,x);
        unique_prime_factorization(n/x,xs,remove(x,l2));
    }
}

lemma void prime_factorization_exhaustive(
        int n, int p, list<int> l)
    requires product(l) == n
        &*&  n > 0 &*& !!forall(l,is_prime)
        &*&  !!is_prime(p) &*& n%p == 0;
    ensures !!mem(p,l);
{
    list<int> l2 = cons(p,nil);
    div_rem(n,p);

    n = n/p;
    if(n <= 0) {
        my_mul_mono_l(n,0,p);
        assert false;
    }

    while(n > 1)
        invariant !!forall(l2,is_prime)
            &*&   !!mem(p,l2)
            &*&   n*product(l2) == product(l)
            &*&   n >= 1;
        decreases n;
    {
        if(is_prime(n)) {
            l2 = cons(n,l2);
            n = 1;
        } else {
            int q = findFactor(n);
            div_rem(n,q);
            mul_3var(q,product(l2),n/q);

            if(n/q >= n) {
                my_mul_mono_l(2,q,n/q);
                assert false;
            }

            l2 = cons(q,l2);
            n /= q;

            if(n <= 0) {
                my_mul_mono_l(n,0,q);
                assert false;
            }
        }
    }

    unique_prime_factorization(product(l), l, l2);
    is_perm_mem(l, l2, p);
}

//lemma void prime_no_factors(int x, int y)
//    requires !!is_prime(x) &*& y > 1 &*& y < x;
//    ensures  x%y != 0;
//{
//    nat f = nat_of_int(x);
//
//    while(int_of_nat(f) > y)
//        invariant is_prime_fueled(x,f)
//            &*&   int_of_nat(f) >= y
//            ;
//        decreases int_of_nat(f) - y;
//    {
//        switch(f) {
//        case zero:     assert false;
//        case succ(f0): f = f0;
//        }
//    }
//}

//fixpoint list<int> prime_factorization_fueled(int x, nat n) {
//    switch(n) {
//    case zero: return {};
//    case succ(n0):
//        return x%int_of_nat(n) == 0 && is_prime(int_of_nat(n))
//            ?
//            cons(int_of_nat(n),prime_factorization_fueled(x/int_of_nat(n), n0)
//    }
//}

lemma void factor_bound(int a, int b)
    requires a >= 0 &*& b >= 0 &*& a*b > 0;
    ensures  a >= 1 &*& a <= a*b
        &*&  b >= 1 &*& b <= a*b;
{
    if(a < 1) { assert false; }
    if(b < 1) { assert false; }
    my_mul_mono_r(a,1,b);
    my_mul_mono_l(1,a,b);
}

lemma_auto(reverse(primes_below(n)))
void primes_below_sorted(nat n)
    requires true;
    ensures  !!sorted(reverse(primes_below(n)));
{
    switch(n) {
    case zero:
    case succ(n0):
        primes_below_sorted(n0);
        if(is_prime(int_of_nat(n))) {
            if(!sorted(reverse(primes_below(n)))) {
                pair<int,int> cx = not_sorted_append(reverse(primes_below(n0)),
                            {int_of_nat(n)});
            }
        }
    }
}

#endif

